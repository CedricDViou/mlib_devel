from yellow_block import YellowBlock
from constraints import PortConstraint, ClockConstraint, RawConstraint
from itertools import count
from clk_factors import clk_factors


class forty_gbe(YellowBlock):
    # @staticmethod
    # def factory(blk, plat, hdl_root=None):
    #    return forty_gbe_xilinx_v7(blk, plat, hdl_root)

    def instantiate_fgbe(self, top, num=None):

        # Wishbone memory for status registers / ARP table
        #fgbe.add_wb_interface(self.unique_name, mode='rw', nbytes=0x4000) # as in matlab code

        multiply, divide, divclk = clk_factors(156.25, self.platform.user_clk_rate)

        inst = top.get_instance('forty_gbe', 'forty_gbe_inst')
        inst.add_parameter('MULTIPLY', multiply)
        inst.add_parameter('DIVIDE',   divide)
        inst.add_parameter('DIVCLK',   divclk)
        inst.add_port('user_clk_o', 'sys_clk', dir='out')
        inst.add_port('user_rst_o', 'sys_rst', dir='out')
        inst.add_port('GND', 'GND', parent_port=True, dir='out', width=16)

        inst.add_port('FPGA_RESET_N',       'FPGA_RESET_N',       parent_port=True, dir='in')
        inst.add_port('FPGA_REFCLK_BUF0_P', 'FPGA_REFCLK_BUF0_P', parent_port=True, dir='in')
        inst.add_port('FPGA_REFCLK_BUF0_N', 'FPGA_REFCLK_BUF0_N', parent_port=True, dir='in')
        inst.add_port('FPGA_REFCLK_BUF1_P', 'FPGA_REFCLK_BUF1_P', parent_port=True, dir='in')
        inst.add_port('FPGA_REFCLK_BUF1_N', 'FPGA_REFCLK_BUF1_N', parent_port=True, dir='in')

        inst.add_port('HMC_MEZZ0_SDA_IN', 'mez0_sda_out', dir='in')
        inst.add_port('HMC_MEZZ0_SDA_OUT', 'mez0_sda_in', dir='out')
        inst.add_port('HMC_MEZZ0_SCL_IN', 'mez0_scl_out', dir='in')
        inst.add_port('HMC_MEZZ0_SCL_OUT', 'mez0_scl_in', dir='out')
        inst.add_port('HMC_MEZZ0_INIT_DONE', 'mez0_init_done', dir='in')

        inst.add_port('HMC_MEZZ1_SDA_IN', 'mez1_sda_out', dir='in')
        inst.add_port('HMC_MEZZ1_SDA_OUT', 'mez1_sda_in', dir='out')
        inst.add_port('HMC_MEZZ1_SCL_IN', 'mez1_scl_out', dir='in')
        inst.add_port('HMC_MEZZ1_SCL_OUT', 'mez1_scl_in', dir='out')
        inst.add_port('HMC_MEZZ1_INIT_DONE', 'mez1_init_done', dir='in')

        inst.add_port('HMC_MEZZ2_SDA_IN', 'mez2_sda_out', dir='in')
        inst.add_port('HMC_MEZZ2_SDA_OUT', 'mez2_sda_in', dir='out')
        inst.add_port('HMC_MEZZ2_SCL_IN', 'mez2_scl_out', dir='in')
        inst.add_port('HMC_MEZZ2_SCL_OUT', 'mez2_scl_in', dir='out')
        inst.add_port('HMC_MEZZ2_INIT_DONE', 'mez2_init_done', dir='in')

        inst.add_port('MEZZANINE_0_PRESENT_N', 'MEZZANINE_0_PRESENT_N', parent_port=True, dir='in')
        inst.add_port('MEZZANINE_0_ENABLE_N',  'MEZZANINE_0_ENABLE_N',  parent_port=True, dir='out')
        # inst.add_port('MEZZANINE_0_RESET',     'MEZZANINE_0_RESET',     parent_port=True, dir='out')
        inst.add_port('MEZZANINE_0_FAULT_N',   'MEZZANINE_0_FAULT_N',   parent_port=True, dir='in')
        inst.add_port('MEZZANINE_0_ONE_WIRE',  'MEZZANINE_0_ONE_WIRE',  parent_port=True, dir='inout')
        # inst.add_port('MEZZANINE_0_CLK_SEL',   'MEZZANINE_0_CLK_SEL',   parent_port=True, dir='out')
        inst.add_port('MEZZANINE_0_SCL_FPGA',  'MEZZANINE_0_SCL_FPGA',  parent_port=True, dir='inout')
        inst.add_port('MEZZANINE_0_SDA_FPGA',  'MEZZANINE_0_SDA_FPGA',  parent_port=True, dir='inout')
        inst.add_port('MEZZANINE_0_INT_N',     'MEZZANINE_0_INT_N',     parent_port=True, dir='in')
        inst.add_port('MEZZANINE_0_ONE_WIRE_STRONG_PULLUP_EN_N', 'MEZZANINE_0_ONE_WIRE_STRONG_PULLUP_EN_N', parent_port=True, dir='out')

        inst.add_port('MEZZANINE_1_PRESENT_N', 'MEZZANINE_1_PRESENT_N', parent_port=True, dir='in')
        inst.add_port('MEZZANINE_1_ENABLE_N',  'MEZZANINE_1_ENABLE_N',  parent_port=True, dir='out')
        # inst.add_port('MEZZANINE_1_RESET',     'MEZZANINE_1_RESET',     parent_port=True, dir='out')
        inst.add_port('MEZZANINE_1_FAULT_N',   'MEZZANINE_1_FAULT_N',   parent_port=True, dir='in')
        inst.add_port('MEZZANINE_1_ONE_WIRE',  'MEZZANINE_1_ONE_WIRE',  parent_port=True, dir='inout')
        # inst.add_port('MEZZANINE_1_CLK_SEL',   'MEZZANINE_1_CLK_SEL',   parent_port=True, dir='out')
        inst.add_port('MEZZANINE_1_SCL_FPGA',  'MEZZANINE_1_SCL_FPGA',  parent_port=True, dir='inout')
        inst.add_port('MEZZANINE_1_SDA_FPGA',  'MEZZANINE_1_SDA_FPGA',  parent_port=True, dir='inout')
        inst.add_port('MEZZANINE_1_INT_N',     'MEZZANINE_1_INT_N',     parent_port=True, dir='in')
        inst.add_port('MEZZANINE_1_ONE_WIRE_STRONG_PULLUP_EN_N', 'MEZZANINE_1_ONE_WIRE_STRONG_PULLUP_EN_N', parent_port=True, dir='out')

        inst.add_port('MEZZANINE_2_PRESENT_N', 'MEZZANINE_2_PRESENT_N', parent_port=True, dir='in')
        inst.add_port('MEZZANINE_2_ENABLE_N',  'MEZZANINE_2_ENABLE_N',  parent_port=True, dir='out')
        # inst.add_port('MEZZANINE_2_RESET',     'MEZZANINE_2_RESET',     parent_port=True, dir='out')
        inst.add_port('MEZZANINE_2_FAULT_N',   'MEZZANINE_2_FAULT_N',   parent_port=True, dir='in')
        inst.add_port('MEZZANINE_2_ONE_WIRE',  'MEZZANINE_2_ONE_WIRE',  parent_port=True, dir='inout')
        # inst.add_port('MEZZANINE_2_CLK_SEL',   'MEZZANINE_2_CLK_SEL',   parent_port=True, dir='out')
        inst.add_port('MEZZANINE_2_SCL_FPGA',  'MEZZANINE_2_SCL_FPGA',  parent_port=True, dir='inout')
        inst.add_port('MEZZANINE_2_SDA_FPGA',  'MEZZANINE_2_SDA_FPGA',  parent_port=True, dir='inout')
        inst.add_port('MEZZANINE_2_INT_N',     'MEZZANINE_2_INT_N',     parent_port=True, dir='in')
        inst.add_port('MEZZANINE_2_ONE_WIRE_STRONG_PULLUP_EN_N', 'MEZZANINE_2_ONE_WIRE_STRONG_PULLUP_EN_N', parent_port=True, dir='out')

        inst.add_port('MEZ3_REFCLK_0_P',      'MEZ3_REFCLK_0_P',      parent_port=True, dir='in')
        inst.add_port('MEZ3_REFCLK_0_N',      'MEZ3_REFCLK_0_N',      parent_port=True, dir='in')
        inst.add_port('MEZ3_PHY11_LANE_RX_P', 'MEZ3_PHY11_LANE_RX_P', parent_port=True, dir='in', width=4)
        inst.add_port('MEZ3_PHY11_LANE_RX_N', 'MEZ3_PHY11_LANE_RX_N', parent_port=True, dir='in', width=4)
        inst.add_port('MEZ3_PHY11_LANE_TX_P', 'MEZ3_PHY11_LANE_TX_P', parent_port=True, dir='out', width=4)
        inst.add_port('MEZ3_PHY11_LANE_TX_N', 'MEZ3_PHY11_LANE_TX_N', parent_port=True, dir='out', width=4)

        inst.add_port('MEZZANINE_3_PRESENT_N', 'MEZZANINE_3_PRESENT_N', parent_port=True, dir='in')
        inst.add_port('MEZZANINE_3_ENABLE_N',  'MEZZANINE_3_ENABLE_N',  parent_port=True, dir='out')
        inst.add_port('MEZZANINE_3_RESET',     'MEZZANINE_3_RESET',     parent_port=True, dir='out')
        inst.add_port('MEZZANINE_3_FAULT_N',   'MEZZANINE_3_FAULT_N',   parent_port=True, dir='in')
        inst.add_port('MEZZANINE_3_ONE_WIRE',  'MEZZANINE_3_ONE_WIRE',  parent_port=True, dir='inout')
        inst.add_port('MEZZANINE_3_CLK_SEL',   'MEZZANINE_3_CLK_SEL',   parent_port=True, dir='out')
        inst.add_port('MEZZANINE_3_SCL_FPGA',  'MEZZANINE_3_SCL_FPGA',  parent_port=True, dir='inout')
        inst.add_port('MEZZANINE_3_SDA_FPGA',  'MEZZANINE_3_SDA_FPGA',  parent_port=True, dir='inout')
        inst.add_port('MEZZANINE_3_INT_N',     'MEZZANINE_3_INT_N',     parent_port=True, dir='in')
        inst.add_port('MEZZANINE_3_ONE_WIRE_STRONG_PULLUP_EN_N', 'MEZZANINE_3_ONE_WIRE_STRONG_PULLUP_EN_N', parent_port=True, dir='out')

        inst.add_port('ONE_GBE_SGMII_TX_P', 'ONE_GBE_SGMII_TX_P', parent_port=True, dir='out')
        inst.add_port('ONE_GBE_SGMII_TX_N', 'ONE_GBE_SGMII_TX_N', parent_port=True, dir='out')
        inst.add_port('ONE_GBE_SGMII_RX_P', 'ONE_GBE_SGMII_RX_P', parent_port=True, dir='in')
        inst.add_port('ONE_GBE_SGMII_RX_N', 'ONE_GBE_SGMII_RX_N', parent_port=True, dir='in')
        inst.add_port('ONE_GBE_MGTREFCLK_P', 'ONE_GBE_MGTREFCLK_P', parent_port=True, dir='in')
        inst.add_port('ONE_GBE_MGTREFCLK_N', 'ONE_GBE_MGTREFCLK_N', parent_port=True, dir='in')

        inst.add_port('ONE_GBE_RESET_N', 'ONE_GBE_RESET_N', parent_port=True, dir='out')
        inst.add_port('ONE_GBE_INT_N',   'ONE_GBE_INT_N',   parent_port=True, dir='in')
        inst.add_port('ONE_GBE_LINK',    'ONE_GBE_LINK',    parent_port=True, dir='in')

        inst.add_port('ONE_WIRE_EEPROM',                    'ONE_WIRE_EEPROM',                    parent_port=True, dir='inout')
        inst.add_port('ONE_WIRE_EEPROM_STRONG_PULLUP_EN_N', 'ONE_WIRE_EEPROM_STRONG_PULLUP_EN_N', parent_port=True, dir='out')

        inst.add_port('I2C_SCL_FPGA',             'I2C_SCL_FPGA',             parent_port=True, dir='inout')
        inst.add_port('I2C_SDA_FPGA',             'I2C_SDA_FPGA',             parent_port=True, dir='inout')
        inst.add_port('I2C_RESET_FPGA',           'I2C_RESET_FPGA',           parent_port=True, dir='out')
        inst.add_port('FAN_CONT_RST_N',           'FAN_CONT_RST_N',           parent_port=True, dir='out')
        inst.add_port('FAN_CONT_ALERT_N',         'FAN_CONT_ALERT_N',         parent_port=True, dir='in')
        inst.add_port('FAN_CONT_FAULT_N',         'FAN_CONT_FAULT_N',         parent_port=True, dir='in')
        inst.add_port('MONITOR_ALERT_N',          'MONITOR_ALERT_N',          parent_port=True, dir='in')
        inst.add_port('MEZZANINE_COMBINED_FAULT', 'MEZZANINE_COMBINED_FAULT', parent_port=True, dir='out')
        inst.add_port('FPGA_ATX_PSU_KILL',        'FPGA_ATX_PSU_KILL',        parent_port=True, dir='out')

        inst.add_port('USB_FPGA',     'USB_FPGA',     parent_port=True, dir='in', width=4)
        inst.add_port('USB_I2C_CTRL', 'USB_I2C_CTRL', parent_port=True, dir='in')
        inst.add_port('USB_UART_RXD', 'USB_UART_RXD', parent_port=True, dir='out')
        inst.add_port('USB_UART_TXD', 'USB_UART_TXD', parent_port=True, dir='in')

        inst.add_port('PCIE_RST_N',      'PCIE_RST_N',      parent_port=True, dir='in')
        inst.add_port('CPU_PWR_BTN_N',   'CPU_PWR_BTN_N',   parent_port=True, dir='out')
        inst.add_port('CPU_PWR_OK',      'CPU_PWR_OK',      parent_port=True, dir='out')
        inst.add_port('CPU_SYS_RESET_N', 'CPU_SYS_RESET_N', parent_port=True, dir='out')
        inst.add_port('CPU_SUS_S3_N',    'CPU_SUS_S3_N',    parent_port=True, dir='in')
        inst.add_port('CPU_SUS_S4_N',    'CPU_SUS_S4_N',    parent_port=True, dir='in')
        inst.add_port('CPU_SUS_S5_N',    'CPU_SUS_S5_N',    parent_port=True, dir='in')
        inst.add_port('CPU_SUS_STAT_N',  'CPU_SUS_STAT_N',  parent_port=True, dir='in')

        inst.add_port('EMCCLK',       'EMCCLK',       parent_port=True, dir='in')
        inst.add_port('FPGA_EMCCLK2', 'FPGA_EMCCLK2', parent_port=True, dir='in')
        inst.add_port('FLASH_DQ',     'FLASH_DQ',     parent_port=True, dir='inout', width=16)
        inst.add_port('FLASH_A',      'FLASH_A',      parent_port=True, dir='out', width=29)
        inst.add_port('FLASH_CS_N',   'FLASH_CS_N',   parent_port=True, dir='out')
        inst.add_port('FLASH_OE_N',   'FLASH_OE_N',   parent_port=True, dir='out')
        inst.add_port('FLASH_WE_N',   'FLASH_WE_N',   parent_port=True, dir='out')
        inst.add_port('FLASH_ADV_N',  'FLASH_ADV_N',  parent_port=True, dir='out')
        inst.add_port('FLASH_RS0',    'FLASH_RS0',    parent_port=True, dir='out')
        inst.add_port('FLASH_RS1',    'FLASH_RS1',    parent_port=True, dir='out')
        inst.add_port('FLASH_WAIT',   'FLASH_WAIT',   parent_port=True, dir='in')

        inst.add_port('SPARTAN_CLK',  'SPARTAN_CLK',  parent_port=True, dir='out')
        inst.add_port('CONFIG_IO_0',  'CONFIG_IO_0',  parent_port=True, dir='out')
        inst.add_port('CONFIG_IO_1',  'CONFIG_IO_1',  parent_port=True, dir='out')
        inst.add_port('CONFIG_IO_2',  'CONFIG_IO_2',  parent_port=True, dir='in')
        inst.add_port('CONFIG_IO_3',  'CONFIG_IO_3',  parent_port=True, dir='out')
        inst.add_port('CONFIG_IO_4',  'CONFIG_IO_4',  parent_port=True, dir='out')
        inst.add_port('CONFIG_IO_5',  'CONFIG_IO_5',  parent_port=True, dir='in')
        inst.add_port('CONFIG_IO_6',  'CONFIG_IO_6',  parent_port=True, dir='out')
        inst.add_port('CONFIG_IO_7',  'CONFIG_IO_7',  parent_port=True, dir='out')
        inst.add_port('CONFIG_IO_8',  'CONFIG_IO_8',  parent_port=True, dir='out')
        inst.add_port('CONFIG_IO_9',  'CONFIG_IO_9',  parent_port=True, dir='out')
        inst.add_port('CONFIG_IO_10', 'CONFIG_IO_10', parent_port=True, dir='out')
        inst.add_port('CONFIG_IO_11', 'CONFIG_IO_11', parent_port=True, dir='out')

        inst.add_port('SPI_MISO', 'SPI_MISO', parent_port=True, dir='in')
        inst.add_port('SPI_MOSI', 'SPI_MOSI', parent_port=True, dir='out')
        inst.add_port('SPI_CSB',  'SPI_CSB',  parent_port=True, dir='out')
        inst.add_port('SPI_CLK',  'SPI_CLK',  parent_port=True, dir='out')

        inst.add_port('FPGA_GPIO',     'FPGA_GPIO',     parent_port=True, dir='out', width=16)
        inst.add_port('DEBUG_UART_TX', 'DEBUG_UART_TX', parent_port=True, dir='out')
        inst.add_port('DEBUG_UART_RX', 'DEBUG_UART_RX', parent_port=True, dir='in')

        # leaving the aux pins here so that we can support them at a later stage.
        #inst.add_port('AUX_CLK_P',   'AUX_CLK_P',   parent_port=True, dir='in')
        #inst.add_port('AUX_CLK_N',   'AUX_CLK_N',   parent_port=True, dir='in')
        #inst.add_port('AUX_SYNCI_P', 'AUX_SYNCI_P', parent_port=True, dir='in')
        #inst.add_port('AUX_SYNCI_N', 'AUX_SYNCI_N', parent_port=True, dir='in')
        #inst.add_port('AUX_SYNCO_P', 'AUX_SYNCO_P', parent_port=True, dir='out')
        #inst.add_port('AUX_SYNCO_N', 'AUX_SYNCO_N', parent_port=True, dir='out')

        inst.add_port('EMCCLK_FIX', 'EMCCLK_FIX', parent_port=True, dir='out')

        inst.add_port('tx_valid',        self.fullname+'_tx_valid',        width=1,  dir='in')
        inst.add_port('tx_end_of_frame', self.fullname+'_tx_end_of_frame', width=1,  dir='in')
        inst.add_port('tx_data',         self.fullname+'_tx_data',         width=64, dir='in')
        inst.add_port('tx_dest_ip',      self.fullname+'_tx_dest_ip',      width=32, dir='in')
        inst.add_port('tx_dest_port',    self.fullname+'_tx_dest_port',    width=16, dir='in')
        inst.add_port('tx_overflow',     self.fullname+'_tx_overflow',     width=1,  dir='out')
        inst.add_port('tx_afull',        self.fullname+'_tx_afull',        width=1,  dir='out')
        inst.add_port('rx_valid',        self.fullname+'_rx_valid',        width=1,  dir='out')
        inst.add_port('rx_end_of_frame', self.fullname+'_rx_end_of_frame', width=1,  dir='out')
        inst.add_port('rx_data',         self.fullname+'_rx_data',         width=64, dir='out')
        inst.add_port('rx_source_ip',    self.fullname+'_rx_source_ip',    width=32, dir='out')
        inst.add_port('rx_source_port',  self.fullname+'_rx_source_port',  width=16, dir='out')
        inst.add_port('rx_bad_frame',    self.fullname+'_rx_bad_frame',    width=1,  dir='out')
        inst.add_port('rx_overrun',      self.fullname+'_rx_overrun',      width=1,  dir='out')
        inst.add_port('rx_overrun_ack',  self.fullname+'_rx_overrun_ack',  width=1,  dir='in')
        inst.add_port('rx_ack',          self.fullname+'_rx_ack',          width=1,  dir='in')

        inst.add_port('WB_SLV_CLK_I_top', 'wb_clk_i', width=0, dir='out')
        inst.add_port('WB_SLV_RST_I_top', 'wb_rst_i', width=0, dir='out')
        inst.add_port('WB_SLV_DAT_I_top', 'wbm_dat_o', width=32, dir='out')
        inst.add_port('WB_SLV_DAT_O_top', 'wbm_dat_i', width=32, dir='in')
        inst.add_port('WB_SLV_ACK_O_top', 'wbm_ack_i', width=0, dir='in')
        inst.add_port('WB_SLV_ADR_I_top', 'wbm_adr_o', width=32, dir='out')
        inst.add_port('WB_SLV_CYC_I_top', 'wbm_cyc_o', width=0, dir='out')
        inst.add_port('WB_SLV_SEL_I_top', 'wbm_sel_o', width=4, dir='out')
        inst.add_port('WB_SLV_STB_I_top', 'wbm_stb_o', width=0, dir='out')
        inst.add_port('WB_SLV_WE_I_top', 'wbm_we_o', width=0, dir='out')


        #inst.add_port('fabric_clk_270', 'adc0_clk270')
        #top.add_signal('adc0_clk')

    def initialize(self):
        #self.add_source('forty_gbe')
        #self.add_source('forty_gbe/cpu_buffer/*.xci')
        self.add_source('wishbone_i2c')
        self.add_source('wishbone_one_wire')

        self.add_source('forty_gbe/SKA_10GBE_MAC')
        self.add_source('forty_gbe/SKA_40GBE_MAC')
        self.add_source('forty_gbe/SKA_40GbE_PHY/IEEE802_3_XL_PCS/IEEE802_3_XL_PCS.srcs/sources_1/new')
        self.add_source('forty_gbe/SKA_40GbE_PHY/IEEE802_3_XL_PHY_top')
        self.add_source('forty_gbe/SKA_40GbE_PHY/IEEE802_3_XL_PMA/IEEE802_3_XL_PMA.srcs/sources_1/new')
        self.add_source('forty_gbe/SKA_40GbE_PHY/IEEE802_3_XL_PHY/IEEE802_3_XL_PHY.srcs/sources_1/new')
        self.add_source('forty_gbe/WISHBONE')
        self.add_source('forty_gbe/*.vhd')
        self.add_source('forty_gbe/*.sv')
        self.add_source("forty_gbe/cont_microblaze/cont_microblaze.bd")
        self.add_source("forty_gbe/cont_microblaze/hdl/cont_microblaze_wrapper.vhd")
        self.add_source("forty_gbe/cont_microblaze/EMB123701U1R1.elf")
        self.add_source("forty_gbe/arp_cache/arp_cache.coe")
        self.add_source("forty_gbe/cont_microblaze/ip/cont_microblaze_axi_slave_wishbone_classic_master_0_0/cont_microblaze_axi_slave_wishbone_classic_master_0_0.upgrade_log")

        self.add_source("ila_0/*.xci")
        self.add_source("forty_gbe/gmii_to_sgmii/*.xci")
        self.add_source("forty_gbe/isp_spi_buffer/*.xci")
        self.add_source("forty_gbe/cross_clock_fifo_67x16/*.xci")
        self.add_source("forty_gbe/tx_packet_fifo/*.xci")
        self.add_source("forty_gbe/tx_packet_ctrl_fifo/*.xci")
        self.add_source("forty_gbe/tx_fifo_ext/*.xci")
        self.add_source("forty_gbe/tx_data_fifo_ext/*.xci")
        self.add_source("forty_gbe/rx_packet_fifo_bram/*.xci")
        self.add_source("forty_gbe/rx_packet_ctrl_fifo/*.xci")
        self.add_source("forty_gbe/cpu_buffer/*.xci")
        self.add_source("forty_gbe/arp_cache/*.xci")
        self.add_source("forty_gbe/xaui_to_gmii_fifo/*.xci")
        self.add_source("forty_gbe/gmii_to_xaui_fifo/*.xci")
        self.add_source("forty_gbe/packet_byte_count_fifo/*.xci")
        self.add_source("forty_gbe/ska_tx_packet_fifo/*.xci")
        self.add_source("forty_gbe/ska_tx_packet_ctrl_fifo/*.xci")
        self.add_source("forty_gbe/ska_rx_packet_fifo/*.xci")
        self.add_source("forty_gbe/ska_rx_packet_ctrl_fifo/*.xci")
        self.add_source("forty_gbe/ska_cpu_buffer/*.xci")
        self.add_source("forty_gbe/cross_clock_fifo_36x16/*.xci")
        self.add_source("forty_gbe/cross_clock_fifo_259x16/*.xci")
        self.add_source("forty_gbe/overlap_buffer/*.xci")
        self.add_source("forty_gbe/SKA_40GbE_PHY/IEEE802_3_XL_PMA/IEEE802_3_XL_PMA.srcs/sources_1/ip/XLAUI/*.xci")
        self.add_source("forty_gbe/SKA_40GbE_PHY/IEEE802_3_XL_PCS/IEEE802_3_XL_PCS.srcs/sources_1/ip/fifo_dual_clk/*.xci")
        self.add_source("forty_gbe/SKA_40GbE_PHY/IEEE802_3_XL_PCS/IEEE802_3_XL_PCS.srcs/sources_1/ip/XGMII_FIFO_DUAL_SYNC/*.xci")
        self.add_source("forty_gbe/rx_packet_fifo_dist/*.xci")
        self.add_source("forty_gbe/cpu_rx_packet_size/*.xci")
        self.add_source("forty_gbe/SKA_40GbE_PHY/IEEE802_3_XL_PCS/IEEE802_3_XL_PCS.srcs/sources_1/ip/RS256_FIFO/*.xci")
        self.add_source("forty_gbe/SKA_40GbE_PHY/IEEE802_3_XL_PHY/IEEE802_3_XL_PHY.srcs/sources_1/ip/IEEE802_3_XL_VIO/*.xci")



        #self.add_raw_tcl_cmd("")

        #self.add_source('');

        # roach2 mezzanine slot 0 has 4-7, roach2 mezzanine slot 1 has 0-3, so barrel shift
        # self.port = self.port + 4*((self.slot+1)%2)

        #self.exc_requirements = ['fgbe%d' % self.port]

    def modify_top(self,top):

        self.instantiate_fgbe(top)

    def gen_constraints(self):
        cons = []
        # leaving the aux constraints here so that we can support them at a later stage.
        #cons.append(PortConstraint('AUX_CLK_N','AUX_CLK_N'))
        #cons.append(PortConstraint('AUX_CLK_P','AUX_CLK_P'))
        #cons.append(PortConstraint('AUX_SYNCO_P','AUX_SYNCO_P'))
        #cons.append(PortConstraint('AUX_SYNCI_P','AUX_SYNCI_P'))
        #cons.append(PortConstraint('AUX_SYNCO_N','AUX_SYNCO_N'))
        #cons.append(PortConstraint('AUX_SYNCI_N', 'AUX_SYNCI_N'))

        cons.append(PortConstraint('MEZ3_PHY11_LANE_TX_N', 'MEZ3_PHY11_LANE_TX_N', port_index=range(4),  iogroup_index=range(4)))
        cons.append(PortConstraint('MEZ3_PHY11_LANE_TX_P', 'MEZ3_PHY11_LANE_TX_P', port_index=range(4),  iogroup_index=range(4)))
        cons.append(PortConstraint('MEZ3_PHY11_LANE_RX_N', 'MEZ3_PHY11_LANE_RX_N', port_index=range(4),  iogroup_index=range(4)))
        cons.append(PortConstraint('MEZ3_PHY11_LANE_RX_P', 'MEZ3_PHY11_LANE_RX_P', port_index=range(4),  iogroup_index=range(4)))
        cons.append(PortConstraint('FLASH_DQ',            'FLASH_DQ',            port_index=range(16), iogroup_index=range(16)))
        cons.append(PortConstraint('FPGA_GPIO',           'FPGA_GPIO',           port_index=range(16), iogroup_index=range(16)))
        cons.append(PortConstraint('USB_FPGA',            'USB_FPGA',            port_index=range(4),  iogroup_index=range(4)))
        cons.append(PortConstraint('FLASH_A',             'FLASH_A',             port_index=range(29), iogroup_index=range(29)))
        cons.append(PortConstraint('GND',                 'GND',                 port_index=range(16), iogroup_index=range(16)))
        cons.append(PortConstraint('ONE_GBE_INT_N', 'ONE_GBE_INT_N'))
        cons.append(PortConstraint('FPGA_RESET_N', 'FPGA_RESET_N'))
        cons.append(PortConstraint('FLASH_WE_N', 'FLASH_WE_N'))
        cons.append(PortConstraint('FPGA_EMCCLK2', 'FPGA_EMCCLK2'))
        cons.append(PortConstraint('MEZ3_REFCLK_0_P','MEZ3_REFCLK_0_P'))
        cons.append(PortConstraint('MEZZANINE_3_ONE_WIRE_STRONG_PULLUP_EN_N','MEZZANINE_3_ONE_WIRE_STRONG_PULLUP_EN_N'))
        cons.append(PortConstraint('MEZZANINE_2_ONE_WIRE_STRONG_PULLUP_EN_N','MEZZANINE_2_ONE_WIRE_STRONG_PULLUP_EN_N'))
        cons.append(PortConstraint('MEZZANINE_1_ONE_WIRE_STRONG_PULLUP_EN_N','MEZZANINE_1_ONE_WIRE_STRONG_PULLUP_EN_N'))
        cons.append(PortConstraint('MEZZANINE_0_ONE_WIRE_STRONG_PULLUP_EN_N','MEZZANINE_0_ONE_WIRE_STRONG_PULLUP_EN_N'))
        cons.append(PortConstraint('MEZ3_REFCLK_0_N','MEZ3_REFCLK_0_N'))
        cons.append(PortConstraint('MEZZANINE_3_SCL_FPGA','MEZZANINE_3_SCL_FPGA'))
        cons.append(PortConstraint('MEZZANINE_2_SCL_FPGA','MEZZANINE_2_SCL_FPGA'))
        cons.append(PortConstraint('MEZZANINE_1_SCL_FPGA','MEZZANINE_1_SCL_FPGA'))
        cons.append(PortConstraint('MEZZANINE_0_SCL_FPGA','MEZZANINE_0_SCL_FPGA'))
        cons.append(PortConstraint('EMCCLK_FIX','EMCCLK_FIX'))
        cons.append(PortConstraint('ONE_WIRE_EEPROM','ONE_WIRE_EEPROM'))
        cons.append(PortConstraint('I2C_SCL_FPGA','I2C_SCL_FPGA'))
        cons.append(PortConstraint('FPGA_REFCLK_BUF0_P','FPGA_REFCLK_BUF0_P'))
        cons.append(PortConstraint('ONE_GBE_LINK','ONE_GBE_LINK'))
        cons.append(PortConstraint('SPI_CLK','SPI_CLK'))
        cons.append(PortConstraint('MEZZANINE_3_INT_N','MEZZANINE_3_INT_N'))
        cons.append(PortConstraint('MEZZANINE_2_INT_N','MEZZANINE_2_INT_N'))
        cons.append(PortConstraint('MEZZANINE_1_INT_N','MEZZANINE_1_INT_N'))
        cons.append(PortConstraint('MEZZANINE_0_INT_N','MEZZANINE_0_INT_N'))
        cons.append(PortConstraint('SPI_MISO','SPI_MISO'))
        cons.append(PortConstraint('MEZZANINE_3_PRESENT_N','MEZZANINE_3_PRESENT_N'))
        cons.append(PortConstraint('MEZZANINE_2_PRESENT_N','MEZZANINE_2_PRESENT_N'))
        cons.append(PortConstraint('MEZZANINE_1_PRESENT_N','MEZZANINE_1_PRESENT_N'))
        cons.append(PortConstraint('MEZZANINE_0_PRESENT_N','MEZZANINE_0_PRESENT_N'))
        cons.append(PortConstraint('SPI_CSB','SPI_CSB'))
        cons.append(PortConstraint('FPGA_REFCLK_BUF1_P','FPGA_REFCLK_BUF1_P'))
        cons.append(PortConstraint('SPI_MOSI','SPI_MOSI'))
        cons.append(PortConstraint('USB_I2C_CTRL','USB_I2C_CTRL'))
        cons.append(PortConstraint('DEBUG_UART_RX','DEBUG_UART_RX'))
        cons.append(PortConstraint('USB_UART_RXD','USB_UART_RXD'))
        cons.append(PortConstraint('FAN_CONT_RST_N','FAN_CONT_RST_N'))
        cons.append(PortConstraint('CPU_SUS_S3_N','CPU_SUS_S3_N'))
        cons.append(PortConstraint('MEZZANINE_COMBINED_FAULT','MEZZANINE_COMBINED_FAULT'))
        cons.append(PortConstraint('EMCCLK','EMCCLK'))
        cons.append(PortConstraint('MONITOR_ALERT_N','MONITOR_ALERT_N'))
        cons.append(PortConstraint('I2C_RESET_FPGA','I2C_RESET_FPGA'))
        cons.append(PortConstraint('I2C_SDA_FPGA','I2C_SDA_FPGA'))
        cons.append(PortConstraint('MEZZANINE_3_FAULT_N','MEZZANINE_3_FAULT_N'))
        cons.append(PortConstraint('MEZZANINE_2_FAULT_N','MEZZANINE_2_FAULT_N'))
        cons.append(PortConstraint('MEZZANINE_1_FAULT_N','MEZZANINE_1_FAULT_N'))
        cons.append(PortConstraint('MEZZANINE_0_FAULT_N','MEZZANINE_0_FAULT_N'))
        cons.append(PortConstraint('FAN_CONT_ALERT_N','FAN_CONT_ALERT_N'))
        cons.append(PortConstraint('FLASH_CS_N','FLASH_CS_N'))
        cons.append(PortConstraint('ONE_WIRE_EEPROM_STRONG_PULLUP_EN_N','ONE_WIRE_EEPROM_STRONG_PULLUP_EN_N'))
        cons.append(PortConstraint('CPU_SUS_STAT_N','CPU_SUS_STAT_N'))
        cons.append(PortConstraint('ONE_GBE_SGMII_RX_P','ONE_GBE_SGMII_RX_P'))
        cons.append(PortConstraint('USB_UART_TXD','USB_UART_TXD'))
        cons.append(PortConstraint('FLASH_ADV_N','FLASH_ADV_N'))
        cons.append(PortConstraint('FAN_CONT_FAULT_N','FAN_CONT_FAULT_N'))
        cons.append(PortConstraint('CPU_PWR_OK','CPU_PWR_OK'))
        cons.append(PortConstraint('MEZZANINE_3_ENABLE_N','MEZZANINE_3_ENABLE_N'))
        cons.append(PortConstraint('MEZZANINE_2_ENABLE_N','MEZZANINE_2_ENABLE_N'))
        cons.append(PortConstraint('MEZZANINE_1_ENABLE_N','MEZZANINE_1_ENABLE_N'))
        cons.append(PortConstraint('MEZZANINE_0_ENABLE_N','MEZZANINE_0_ENABLE_N'))
        cons.append(PortConstraint('DEBUG_UART_TX','DEBUG_UART_TX'))
        cons.append(PortConstraint('SPARTAN_CLK','SPARTAN_CLK'))
        cons.append(PortConstraint('MEZZANINE_3_RESET','MEZZANINE_3_RESET'))
        cons.append(PortConstraint('ONE_GBE_SGMII_RX_N','ONE_GBE_SGMII_RX_N'))
        cons.append(PortConstraint('MEZZANINE_3_SDA_FPGA','MEZZANINE_3_SDA_FPGA'))
        cons.append(PortConstraint('MEZZANINE_2_SDA_FPGA','MEZZANINE_2_SDA_FPGA'))
        cons.append(PortConstraint('MEZZANINE_1_SDA_FPGA','MEZZANINE_1_SDA_FPGA'))
        cons.append(PortConstraint('MEZZANINE_0_SDA_FPGA','MEZZANINE_0_SDA_FPGA'))
        cons.append(PortConstraint('CPU_SUS_S4_N','CPU_SUS_S4_N'))
        cons.append(PortConstraint('ONE_GBE_SGMII_TX_P','ONE_GBE_SGMII_TX_P'))
        cons.append(PortConstraint('ONE_GBE_MGTREFCLK_N','ONE_GBE_MGTREFCLK_N'))
        cons.append(PortConstraint('ONE_GBE_MGTREFCLK_P','ONE_GBE_MGTREFCLK_P'))
        cons.append(PortConstraint('FLASH_WAIT','FLASH_WAIT'))
        cons.append(PortConstraint('ONE_GBE_SGMII_TX_N','ONE_GBE_SGMII_TX_N'))
        cons.append(PortConstraint('FPGA_ATX_PSU_KILL','FPGA_ATX_PSU_KILL'))
        cons.append(PortConstraint('CPU_PWR_BTN_N','CPU_PWR_BTN_N'))
        cons.append(PortConstraint('FLASH_OE_N','FLASH_OE_N'))
        cons.append(PortConstraint('ONE_GBE_RESET_N','ONE_GBE_RESET_N'))
        cons.append(PortConstraint('MEZZANINE_3_ONE_WIRE','MEZZANINE_3_ONE_WIRE'))
        cons.append(PortConstraint('MEZZANINE_2_ONE_WIRE','MEZZANINE_2_ONE_WIRE'))
        cons.append(PortConstraint('MEZZANINE_1_ONE_WIRE','MEZZANINE_1_ONE_WIRE'))
        cons.append(PortConstraint('MEZZANINE_0_ONE_WIRE','MEZZANINE_0_ONE_WIRE'))
        cons.append(PortConstraint('FLASH_RS1','FLASH_RS1'))
        cons.append(PortConstraint('FLASH_RS0','FLASH_RS0'))
        cons.append(PortConstraint('CPU_SYS_RESET_N','CPU_SYS_RESET_N'))
        cons.append(PortConstraint('MEZZANINE_3_CLK_SEL','MEZZANINE_3_CLK_SEL'))
        cons.append(PortConstraint('CPU_SUS_S5_N','CPU_SUS_S5_N'))
        cons.append(PortConstraint('CONFIG_IO_0','CONFIG_IO_0'))
        cons.append(PortConstraint('CONFIG_IO_1','CONFIG_IO_1'))
        cons.append(PortConstraint('CONFIG_IO_2','CONFIG_IO_2'))
        cons.append(PortConstraint('CONFIG_IO_3','CONFIG_IO_3'))
        cons.append(PortConstraint('CONFIG_IO_4','CONFIG_IO_4'))
        cons.append(PortConstraint('CONFIG_IO_5','CONFIG_IO_5'))
        cons.append(PortConstraint('CONFIG_IO_6','CONFIG_IO_6'))
        cons.append(PortConstraint('CONFIG_IO_7','CONFIG_IO_7'))
        cons.append(PortConstraint('CONFIG_IO_8','CONFIG_IO_8'))
        cons.append(PortConstraint('CONFIG_IO_9','CONFIG_IO_9'))
        cons.append(PortConstraint('CONFIG_IO_10','CONFIG_IO_10'))
        cons.append(PortConstraint('CONFIG_IO_11','CONFIG_IO_11'))

        #cons.append(RawConstraint('create_clock -period 2.800  -name AUX_CLK_P -waveform {0.000 1.400} [get_ports AUX_CLK_P]'))
        cons.append(RawConstraint('create_clock -period 6.400 -name FPGA_REFCLK_BUF0_P -waveform {0.000 3.200} [get_ports FPGA_REFCLK_BUF0_P]'))
        cons.append(RawConstraint('create_clock -period 6.400 -name FPGA_REFCLK_BUF1_P -waveform {0.000 3.200} [get_ports FPGA_REFCLK_BUF1_P]'))
        cons.append(RawConstraint('create_clock -period 6.400 -name ONE_GBE_MGTREFCLK_P -waveform {0.000 3.200} [get_ports ONE_GBE_MGTREFCLK_P]'))
        cons.append(RawConstraint('create_clock -period 16.666 -name FPGA_EMCCLK2 -waveform {0.000 8.333} [get_ports FPGA_EMCCLK2]'))
        cons.append(RawConstraint('create_clock -period 6.400 -waveform {0.000 3.200} [get_ports MEZ3_REFCLK_0_P]'))

        cons.append(RawConstraint('# create_generated_clock -name forty_gbe_inst/wishbone_flash_sdram_interface_0/icape_controller_0/CLK -source [get_pins {forty_gbe_inst/wishbone_flash_sdram_interface_0/icape_controller_0/icape_clk_count_reg[3]/C}] -divide_by 16 [get_pins {forty_gbe_inst/wishbone_flash_sdram_interface_0/icape_controller_0/icape_clk_count_reg[3]/Q}]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -min -add_delay -2.500 [get_ports {FLASH_A[*]}]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -max -add_delay -3.000 [get_ports {FLASH_A[*]}]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -min -add_delay -2.500 [get_ports {FLASH_DQ[*]}]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -max -add_delay -3.000 [get_ports {FLASH_DQ[*]}]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -min -add_delay -2.500 [get_ports FLASH_ADV_N]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -max -add_delay -3.000 [get_ports FLASH_ADV_N]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -min -add_delay -2.500 [get_ports FLASH_CS_N]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -max -add_delay -3.000 [get_ports FLASH_CS_N]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -min -add_delay -2.500 [get_ports FLASH_OE_N]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -max -add_delay -3.000 [get_ports FLASH_OE_N]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -min -add_delay -2.500 [get_ports FLASH_RS0]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -max -add_delay -3.000 [get_ports FLASH_RS0]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -min -add_delay -2.500 [get_ports FLASH_RS1]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -max -add_delay -3.000 [get_ports FLASH_RS1]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -min -add_delay -2.500 [get_ports FLASH_WE_N]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -max -add_delay -3.000 [get_ports FLASH_WE_N]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -min -add_delay -2.500 [get_ports SPARTAN_CLK]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -max -add_delay -3.000 [get_ports SPARTAN_CLK]'))

        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -min -add_delay -2.500 [get_ports CONFIG_IO_0]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -max -add_delay -2.500 [get_ports CONFIG_IO_0]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -min -add_delay -2.500 [get_ports CONFIG_IO_1]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -max -add_delay -2.500 [get_ports CONFIG_IO_1]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -min -add_delay -2.500 [get_ports CONFIG_IO_3]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -max -add_delay -2.500 [get_ports CONFIG_IO_3]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -min -add_delay -2.500 [get_ports CONFIG_IO_4]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -max -add_delay -2.500 [get_ports CONFIG_IO_4]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -min -add_delay -2.500 [get_ports CONFIG_IO_6]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -max -add_delay -2.500 [get_ports CONFIG_IO_6]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -min -add_delay -2.500 [get_ports CONFIG_IO_7]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -max -add_delay -2.500 [get_ports CONFIG_IO_7]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -min -add_delay -2.500 [get_ports CONFIG_IO_8]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -max -add_delay -2.500 [get_ports CONFIG_IO_8]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -min -add_delay -2.500 [get_ports CONFIG_IO_9]'))
        cons.append(RawConstraint('set_output_delay -clock [get_clocks FPGA_REFCLK_BUF0_P] -max -add_delay -2.500 [get_ports CONFIG_IO_9]'))

        cons.append(RawConstraint('set_clock_groups -asynchronous -group [get_clocks clkout0] -group [get_clocks FPGA_REFCLK_BUF0_P]'))
        cons.append(RawConstraint('set_clock_groups -asynchronous -group [get_clocks FPGA_REFCLK_BUF0_P] -group [get_clocks clkout0]'))
        cons.append(RawConstraint('set_clock_groups -asynchronous -group [get_clocks clkout0] -group [get_clocks FPGA_REFCLK_BUF1_P]'))
        cons.append(RawConstraint('set_clock_groups -asynchronous -group [get_clocks FPGA_REFCLK_BUF1_P] -group [get_clocks clkout0]'))
        cons.append(RawConstraint('set_false_path -to [get_pins forty_gbe_inst/FPGA_DNA_CHECKER_inst/FPGA_DNA_O_reg[*]/D]'))
        cons.append(RawConstraint('set_false_path -to [get_pins forty_gbe_inst/clock_frequency_measure_1/second_toggle_z_reg/D]'))
        cons.append(RawConstraint('set_false_path -to [get_pins {forty_gbe_inst/clock_frequency_measure_1/clk_count_low_reg_reg[*]/D}]'))
        cons.append(RawConstraint('set_false_path -to [get_pins {forty_gbe_inst/clock_frequency_measure_1/clk_count_high_reg_reg[*]/D}]'))
        cons.append(RawConstraint('set_false_path -to [get_pins forty_gbe_inst/clock_frequency_measure_2/second_toggle_z_reg/D]'))
        cons.append(RawConstraint('set_false_path -to [get_pins {forty_gbe_inst/clock_frequency_measure_2/clk_count_low_reg_reg[*]/D}]'))
        cons.append(RawConstraint('set_false_path -to [get_pins {forty_gbe_inst/clock_frequency_measure_2/clk_count_high_reg_reg[*]/D}]'))


        cons.append(RawConstraint('set_clock_groups -asynchronous -group [get_clocks {FPGA_REFCLK_BUF1_P I}] -group [get_clocks FPGA_REFCLK_BUF0_P]'))
        cons.append(RawConstraint('set_clock_groups -asynchronous -group [get_clocks FPGA_REFCLK_BUF0_P] -group [get_clocks {FPGA_REFCLK_BUF1_P I}]'))
        cons.append(RawConstraint('set_clock_groups -asynchronous -group [get_clocks FPGA_REFCLK_BUF0_P] -group [get_clocks {FPGA_EMCCLK2}]'))
        cons.append(RawConstraint('set_clock_groups -asynchronous -group [get_clocks FPGA_REFCLK_BUF0_P] -group [get_clocks {MEZ3_REFCLK_0_P}]'))

        #cons.append(RawConstraint('set_clock_groups -asynchronous -group [get_clocks AUX_CLK_P] -group [get_clocks FPGA_REFCLK_BUF0_P]'))
        #cons.append(RawConstraint('set_clock_groups -asynchronous -group [get_clocks FPGA_REFCLK_BUF0_P] -group [get_clocks AUX_CLK_P]'))
        cons.append(RawConstraint('create_pblock MEZ3_PHY11_QSFP'))
        cons.append(RawConstraint('add_cells_to_pblock [get_pblocks MEZ3_PHY11_QSFP] [get_cells -quiet [list forty_gbe_inst/IEEE802_3_XL_PHY_0/PHY_inst/RX_CLK_RCC]]'))
        cons.append(RawConstraint('add_cells_to_pblock [get_pblocks MEZ3_PHY11_QSFP] [get_cells -quiet [list forty_gbe_inst/IEEE802_3_XL_PHY_0/PHY_inst/TX_CLK_RCC]]'))
        cons.append(RawConstraint('resize_pblock [get_pblocks MEZ3_PHY11_QSFP] -add {CLOCKREGION_X1Y7:CLOCKREGION_X1Y7}'))

        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports CONFIG_IO_0]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports CONFIG_IO_1]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports CONFIG_IO_10]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports CONFIG_IO_11]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports CONFIG_IO_3]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports CONFIG_IO_4]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports CONFIG_IO_6]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports CONFIG_IO_7]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports CONFIG_IO_8]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports CONFIG_IO_9]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports CPU_PWR_BTN_N]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports CPU_PWR_OK]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports CPU_SYS_RESET_N]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports DEBUG_UART_TX]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FAN_CONT_RST_N]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_ADV_N]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[0]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[10]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[11]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[12]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[13]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[14]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[15]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[16]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[17]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[18]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[19]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[1]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[20]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[21]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[22]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[23]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[24]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[25]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[26]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[27]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[28]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[2]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[3]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[4]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[5]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[6]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[7]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[8]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_A[9]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_CS_N]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_DQ[0]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_DQ[10]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_DQ[11]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_DQ[12]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_DQ[13]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_DQ[14]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_DQ[15]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_DQ[1]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_DQ[2]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_DQ[3]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_DQ[4]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_DQ[5]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_DQ[6]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_DQ[7]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_DQ[8]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_DQ[9]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_OE_N]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_RS0]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_RS1]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FLASH_WE_N]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FPGA_ATX_PSU_KILL]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FPGA_GPIO[0]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FPGA_GPIO[10]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FPGA_GPIO[11]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FPGA_GPIO[12]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FPGA_GPIO[13]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FPGA_GPIO[14]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FPGA_GPIO[15]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FPGA_GPIO[1]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FPGA_GPIO[2]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FPGA_GPIO[3]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FPGA_GPIO[4]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FPGA_GPIO[5]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FPGA_GPIO[6]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FPGA_GPIO[7]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FPGA_GPIO[8]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports FPGA_GPIO[9]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports GND[0]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports GND[10]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports GND[11]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports GND[12]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports GND[13]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports GND[14]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports GND[15]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports GND[1]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports GND[2]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports GND[3]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports GND[4]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports GND[5]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports GND[6]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports GND[7]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports GND[8]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports GND[9]]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports I2C_RESET_FPGA]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports I2C_SCL_FPGA]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports I2C_SDA_FPGA]'))
        #cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports MEZZANINE_0_CLK_SEL]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports MEZZANINE_0_ENABLE_N]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports MEZZANINE_0_ONE_WIRE]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports MEZZANINE_0_ONE_WIRE_STRONG_PULLUP_EN_N]'))
        #cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports MEZZANINE_0_RESET]'))
        #cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports MEZZANINE_1_CLK_SEL]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports MEZZANINE_1_ENABLE_N]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports MEZZANINE_1_ONE_WIRE]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports MEZZANINE_1_ONE_WIRE_STRONG_PULLUP_EN_N]'))
        #cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports MEZZANINE_1_RESET]'))
        #cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports MEZZANINE_2_CLK_SEL]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports MEZZANINE_2_ENABLE_N]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports MEZZANINE_2_ONE_WIRE]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports MEZZANINE_2_ONE_WIRE_STRONG_PULLUP_EN_N]'))
        #cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports MEZZANINE_2_RESET]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports MEZZANINE_3_CLK_SEL]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports MEZZANINE_3_ENABLE_N]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports MEZZANINE_3_ONE_WIRE]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports MEZZANINE_3_ONE_WIRE_STRONG_PULLUP_EN_N]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports MEZZANINE_3_RESET]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports ONE_GBE_RESET_N]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports ONE_WIRE_EEPROM]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports ONE_WIRE_EEPROM_STRONG_PULLUP_EN_N]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports SPARTAN_CLK]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports SPI_CLK]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports SPI_CSB]'))
        cons.append(RawConstraint('set_property OFFCHIP_TERM NONE [get_ports USB_UART_RXD]'))

        return cons

    def gen_tcl_cmds(self):
        tcl_cmds = []

        tcl_cmds.append('import_files -force -fileset constrs_1 hdl_sources/forty_gbe/Constraints/gmii_to_sgmii.xdc')
        tcl_cmds.append('import_files -force -fileset constrs_1 hdl_sources/forty_gbe/Constraints/soc_version.xdc')
        tcl_cmds.append('import_files -force -fileset constrs_1 hdl_sources/forty_gbe/SKA_40GbE_PHY/IEEE802_3_XL_PCS/IEEE802_3_XL_PCS.srcs/constrs_1/new/IEEE802_3_XL_PCS.xdc')
        tcl_cmds.append('import_files -force -fileset constrs_1 hdl_sources/forty_gbe/SKA_40GbE_PHY/IEEE802_3_XL_PCS/IEEE802_3_XL_PCS.srcs/constrs_1/new/DATA_FREQUENCY_DIVIDER.xdc')
        tcl_cmds.append('import_files -force -fileset constrs_1 hdl_sources/forty_gbe/SKA_40GbE_PHY/IEEE802_3_XL_PCS/IEEE802_3_XL_PCS.srcs/constrs_1/new/DATA_FREQUENCY_MULTIPLIER.xdc')
        tcl_cmds.append('import_files -force -fileset constrs_1 hdl_sources/forty_gbe/SKA_40GbE_PHY/IEEE802_3_XL_PHY/IEEE802_3_XL_PHY.srcs/constrs_1/new/IEEE802_3_XL_PHY.xdc')

        tcl_cmds.append('set_property is_locked true [get_files [get_property directory [current_project]]/myproj.srcs/sources_1/bd/cont_microblaze/cont_microblaze.bd]')
        tcl_cmds.append('set_property is_locked true [get_files [get_property directory [current_project]]/myproj.srcs/sources_1/ip/gmii_to_sgmii/gmii_to_sgmii.xci]')
        tcl_cmds.append('set_property SCOPED_TO_REF IEEE802_3_XL_PCS [get_files [get_property directory [current_project]]/myproj.srcs/constrs_1/imports/new/IEEE802_3_XL_PCS.xdc]')
        tcl_cmds.append('set_property processing_order LATE [get_files [get_property directory [current_project]]/myproj.srcs/constrs_1/imports/new/IEEE802_3_XL_PCS.xdc]')
        tcl_cmds.append('set_property SCOPED_TO_REF DATA_FREQUENCY_DIVIDER [get_files [get_property directory [current_project]]/myproj.srcs/constrs_1/imports/new/DATA_FREQUENCY_DIVIDER.xdc]')
        tcl_cmds.append('set_property processing_order LATE [get_files [get_property directory [current_project]]/myproj.srcs/constrs_1/imports/new/DATA_FREQUENCY_DIVIDER.xdc]')
        tcl_cmds.append('set_property SCOPED_TO_REF DATA_FREQUENCY_MULTIPLIER [get_files [get_property directory [current_project]]/myproj.srcs/constrs_1/imports/new/DATA_FREQUENCY_MULTIPLIER.xdc]')
        tcl_cmds.append('set_property processing_order LATE [get_files [get_property directory [current_project]]/myproj.srcs/constrs_1/imports/new/DATA_FREQUENCY_MULTIPLIER.xdc]')
        tcl_cmds.append('set_property SCOPED_TO_REF IEEE802_3_XL_PHY [get_files [get_property directory [current_project]]/myproj.srcs/constrs_1/imports/new/IEEE802_3_XL_PHY.xdc]')
        tcl_cmds.append('set_property processing_order LATE [get_files [get_property directory [current_project]]/myproj.srcs/constrs_1/imports/new/IEEE802_3_XL_PHY.xdc]')
        tcl_cmds.append('set_property SCOPED_TO_REF cont_microblaze [get_files [get_property directory [current_project]]/myproj.srcs/sources_1/imports/cont_microblaze/EMB123701U1R1.elf]')
        tcl_cmds.append('set_property SCOPED_TO_REF cont_microblaze [get_files [get_property directory [current_project]]/myproj.srcs/sources_1/bd/cont_microblaze/cont_microblaze.bmm]')
        tcl_cmds.append('set_property SCOPED_TO_CELLS microblaze_0 [get_files [get_property directory [current_project]]/myproj.srcs/sources_1/imports/cont_microblaze/EMB123701U1R1.elf]')

        return tcl_cmds
