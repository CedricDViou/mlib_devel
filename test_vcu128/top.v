// MODULE top, AUTOMATICALLY GENERATED BY PYTHON

/**/
`default_nettype wire


module top (
  // microblaze: xps:microblaze0
    input UART_rxd,
    inout spi_rtl_io0,
    inout spi_rtl_io1,
    inout spi_rtl_io2,
    inout spi_rtl_io3,
    inout spi_rtl_ss,
    output UART_txd,
  // gpio: led
    output [0:0] test_vcu128_led_ext,
  // onegbe: gbe
    input test_vcu128_gbe_refclk625_n,
    input test_vcu128_gbe_refclk625_p,
    input test_vcu128_gbe_rx_n,
    input test_vcu128_gbe_rx_p,
    inout phy_mdio,
    output phy_mdc,
    output phy_pdown_n,
    output phy_rst_n,
    output test_vcu128_gbe_tx_n,
    output test_vcu128_gbe_tx_p,
  // vcu128: VCU128
    input sys_clk_n,
    input sys_clk_p
  );



  // usermodule: test_vcu128
  localparam N_WB_SLAVES = 3;
  localparam SLAVE_ADDR = {
    32'h00020004, // sys_block
    32'h00010004, // gbe
    32'h00010000 // rst
    };
  localparam SLAVE_HIGH = {
    32'h00020043, // sys_block
    32'h00020003, // gbe
    32'h00010003 // rst
    };
  localparam SYS_BLOCK_INST_WBID0 = 2;
  localparam TEST_VCU128_GBE_WBID0 = 1;
  localparam TEST_VCU128_RST_WBID0 = 0;

/*
  _____ _                   _     
 / ____(_)                 | |    
| (___  _  __ _ _ __   __ _| |___ 
 \___ \| |/ _` | '_ \ / _` | / __|
 ____) | | (_| | | | | (_| | \__ \ 
|_____/|_|\__, |_| |_|\__,_|_|___/
          __/ |                  
         |___/                   
*/
  // microblaze: xps:microblaze0
  wire mb_intr;
  wire [3:0] mb_intr_v;
  wire spi_rtl_io0_i;
  wire spi_rtl_io0_o;
  wire spi_rtl_io0_t;
  wire spi_rtl_io1_i;
  wire spi_rtl_io1_o;
  wire spi_rtl_io1_t;
  wire spi_rtl_io2_i;
  wire spi_rtl_io2_o;
  wire spi_rtl_io2_t;
  wire spi_rtl_io3_i;
  wire spi_rtl_io3_o;
  wire spi_rtl_io3_t;
  wire spi_rtl_ss_i;
  wire spi_rtl_ss_o;
  wire spi_rtl_ss_t;
  wire wb_clk_i;
  wire wb_rst_i;
  wire wbm_ack_i;
  wire [31:0] wbm_adr_o;
  wire wbm_cyc_o;
  wire [31:0] wbm_dat_i;
  wire [31:0] wbm_dat_o;
  wire wbm_rst_o;
  wire [3:0] wbm_sel_o;
  wire wbm_stb_o;
  wire wbm_we_o;
  // sw_reg: rst
  wire [31:0] test_vcu128_rst_user_data_out;
  // gpio: led
  wire [0:0] test_vcu128_led_gateway;
  // onegbe: gbe
  wire gbe_userclk2_out;
  wire mdio_done;
  wire rst_125_out;
  wire sys_clk;
  wire sys_clk_rst_sync;
  wire [31:0] test_vcu128_gbe_app_dbg_data;
  wire test_vcu128_gbe_app_dbg_dvld;
  wire test_vcu128_gbe_app_rx_ack;
  wire test_vcu128_gbe_app_rx_badframe;
  wire [7:0] test_vcu128_gbe_app_rx_data;
  wire test_vcu128_gbe_app_rx_dvld;
  wire test_vcu128_gbe_app_rx_eof;
  wire test_vcu128_gbe_app_rx_overrun;
  wire test_vcu128_gbe_app_rx_rst;
  wire [31:0] test_vcu128_gbe_app_rx_srcip;
  wire [15:0] test_vcu128_gbe_app_rx_srcport;
  wire test_vcu128_gbe_app_tx_afull;
  wire [7:0] test_vcu128_gbe_app_tx_data;
  wire [31:0] test_vcu128_gbe_app_tx_destip;
  wire [15:0] test_vcu128_gbe_app_tx_destport;
  wire test_vcu128_gbe_app_tx_dvld;
  wire test_vcu128_gbe_app_tx_eof;
  wire test_vcu128_gbe_app_tx_overflow;
  wire test_vcu128_gbe_app_tx_rst;
  wire [7:0] test_vcu128_gbe_mac_gmii_rx_data;
  wire test_vcu128_gbe_mac_gmii_rx_dvld;
  wire test_vcu128_gbe_mac_gmii_rx_er;
  wire [7:0] test_vcu128_gbe_mac_gmii_tx_data;
  wire test_vcu128_gbe_mac_gmii_tx_en;
  wire test_vcu128_gbe_mac_gmii_tx_er;
  wire test_vcu128_gbe_mac_rx_badframe;
  wire [7:0] test_vcu128_gbe_mac_rx_data;
  wire test_vcu128_gbe_mac_rx_dvld;
  wire test_vcu128_gbe_mac_rx_goodframe;
  wire test_vcu128_gbe_mac_syncacquired;
  wire test_vcu128_gbe_mac_tx_ack;
  wire [7:0] test_vcu128_gbe_mac_tx_data;
  wire test_vcu128_gbe_mac_tx_dvld;
  // vcu128: VCU128
  wire clk_200;
  wire idelay_rdy;
  wire sys_clk180;
  wire sys_clk270;
  wire sys_clk90;
  wire sys_rst;
  // usermodule: test_vcu128
  wire wbm_err_i;
  wire [2:0] wbs_ack_i;
  wire [31:0] wbs_adr_o;
  wire [2:0] wbs_cyc_o;
  wire [95:0] wbs_dat_i;
  wire [31:0] wbs_dat_o;
  wire [2:0] wbs_err_i;
  wire [3:0] wbs_sel_o;
  wire [2:0] wbs_stb_o;
  wire wbs_we_o;
  // xsg: VCU128
  wire user_clk;
  wire user_clk180;
  wire user_clk270;
  wire user_clk90;

/*
  _____           _                            
 |_   _|         | |                           
   | |  _ __  ___| |_ __ _ _ __   ___ ___  ___ 
   | | | '_ \/ __| __/ _` | '_ \ / __/ _ \/ __|
  _| |_| | | \__ \ || (_| | | | | (_|  __/\__ \ 
 |_____|_| |_|___/\__\__,_|_| |_|\___\___||___/
*/
  // microblaze: xps:microblaze0
  // xps:microblaze0: Microblaze Control and Monitoring subsystem
  cont_microblaze  cont_microblaze_inst (
    .ACK_I(wbm_ack_i),
    .ADR_O(wbm_adr_o),
    .CYC_O(wbm_cyc_o),
    .Clk(wb_clk_i),
    .DAT_I(wbm_dat_i),
    .DAT_O(wbm_dat_o),
    .RST_O(wbm_rst_o),
    .Reset(wb_rst_i),
    .SEL_O(wbm_sel_o),
    .STB_O(wbm_stb_o),
    .UART_rxd(UART_rxd),
    .UART_txd(UART_txd),
    .WE_O(wbm_we_o),
    .dcm_locked(1'b1),
    .ext_intr(mb_intr),
    .spi_rtl_io0_i(spi_rtl_io0_i),
    .spi_rtl_io0_o(spi_rtl_io0_o),
    .spi_rtl_io0_t(spi_rtl_io0_t),
    .spi_rtl_io1_i(spi_rtl_io1_i),
    .spi_rtl_io1_o(spi_rtl_io1_o),
    .spi_rtl_io1_t(spi_rtl_io1_t),
    .spi_rtl_io2_i(spi_rtl_io2_i),
    .spi_rtl_io2_o(spi_rtl_io2_o),
    .spi_rtl_io2_t(spi_rtl_io2_t),
    .spi_rtl_io3_i(spi_rtl_io3_i),
    .spi_rtl_io3_o(spi_rtl_io3_o),
    .spi_rtl_io3_t(spi_rtl_io3_t),
    .spi_rtl_ss_i(spi_rtl_ss_i),
    .spi_rtl_ss_o(spi_rtl_ss_o),
    .spi_rtl_ss_t(spi_rtl_ss_t)
  );


  // Bidirectional buffer placed by microblaze yellow block
  IOBUF  spi_rtl_io0_inst (
    .I(spi_rtl_io0_o),
    .IO(spi_rtl_io0),
    .O(spi_rtl_io0_i),
    .T(spi_rtl_io0_t)
  );


  // Bidirectional buffer placed by microblaze yellow block
  IOBUF  spi_rtl_io1_inst (
    .I(spi_rtl_io1_o),
    .IO(spi_rtl_io1),
    .O(spi_rtl_io1_i),
    .T(spi_rtl_io1_t)
  );


  // Bidirectional buffer placed by microblaze yellow block
  IOBUF  spi_rtl_io2_inst (
    .I(spi_rtl_io2_o),
    .IO(spi_rtl_io2),
    .O(spi_rtl_io2_i),
    .T(spi_rtl_io2_t)
  );


  // Bidirectional buffer placed by microblaze yellow block
  IOBUF  spi_rtl_io3_inst (
    .I(spi_rtl_io3_o),
    .IO(spi_rtl_io3),
    .O(spi_rtl_io3_i),
    .T(spi_rtl_io3_t)
  );


  // Bidirectional buffer placed by microblaze yellow block
  IOBUF  spi_rtl_ss_inst (
    .I(spi_rtl_ss_o),
    .IO(spi_rtl_ss),
    .O(spi_rtl_ss_i),
    .T(spi_rtl_ss_t)
  );


  test_vcu128  test_vcu128_inst (
    .clk(user_clk),
    .test_vcu128_gbe_app_dbg_data(test_vcu128_gbe_app_dbg_data),
    .test_vcu128_gbe_app_dbg_dvld(test_vcu128_gbe_app_dbg_dvld),
    .test_vcu128_gbe_app_rx_ack(test_vcu128_gbe_app_rx_ack),
    .test_vcu128_gbe_app_rx_badframe(test_vcu128_gbe_app_rx_badframe),
    .test_vcu128_gbe_app_rx_data(test_vcu128_gbe_app_rx_data),
    .test_vcu128_gbe_app_rx_dvld(test_vcu128_gbe_app_rx_dvld),
    .test_vcu128_gbe_app_rx_eof(test_vcu128_gbe_app_rx_eof),
    .test_vcu128_gbe_app_rx_overrun(test_vcu128_gbe_app_rx_overrun),
    .test_vcu128_gbe_app_rx_rst(test_vcu128_gbe_app_rx_rst),
    .test_vcu128_gbe_app_rx_srcip(test_vcu128_gbe_app_rx_srcip),
    .test_vcu128_gbe_app_rx_srcport(test_vcu128_gbe_app_rx_srcport),
    .test_vcu128_gbe_app_tx_afull(test_vcu128_gbe_app_tx_afull),
    .test_vcu128_gbe_app_tx_data(test_vcu128_gbe_app_tx_data),
    .test_vcu128_gbe_app_tx_destip(test_vcu128_gbe_app_tx_destip),
    .test_vcu128_gbe_app_tx_destport(test_vcu128_gbe_app_tx_destport),
    .test_vcu128_gbe_app_tx_dvld(test_vcu128_gbe_app_tx_dvld),
    .test_vcu128_gbe_app_tx_eof(test_vcu128_gbe_app_tx_eof),
    .test_vcu128_gbe_app_tx_overflow(test_vcu128_gbe_app_tx_overflow),
    .test_vcu128_gbe_app_tx_rst(test_vcu128_gbe_app_tx_rst),
    .test_vcu128_led_gateway(test_vcu128_led_gateway),
    .test_vcu128_rst_user_data_out(test_vcu128_rst_user_data_out)
  );

  // sw_reg: rst
  wb_register_ppc2simulink #(
    .INIT_VAL(32'h0)
  ) test_vcu128_rst (
    .user_clk(user_clk),
    .user_data_out(test_vcu128_rst_user_data_out),
    .wb_ack_o(wbs_ack_i[TEST_VCU128_RST_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[TEST_VCU128_RST_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(TEST_VCU128_RST_WBID0+1)*32-1:(TEST_VCU128_RST_WBID0)*32]),
    .wb_err_o(wbs_err_i[TEST_VCU128_RST_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[TEST_VCU128_RST_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // gpio: led
  gpio_simulink2ext #(
    .CLK_PHASE(0),
    .DDR(0),
    .REG_IOB("true"),
    .WIDTH(1)
  ) test_vcu128_led (
    .clk(user_clk),
    .clk90(user_clk90),
    .gateway(test_vcu128_led_gateway),
    .io_pad(test_vcu128_led_ext)
  );

  // onegbe: gbe
  gbe_udp #(
    .CPU_PROMISCUOUS(0),
    .DIS_CPU_RX(0),
    .DIS_CPU_TX(0),
    .LOCAL_ENABLE(1),
    .LOCAL_GATEWAY(32'd1),
    .LOCAL_IP(32'd3232246026),
    .LOCAL_MAC(48'd20015998343868),
    .LOCAL_PORT(16'd4321)
  ) test_vcu128_gbe (
    .app_clk(user_clk),
    .app_dbg_data(test_vcu128_gbe_app_dbg_data),
    .app_dbg_dvld(test_vcu128_gbe_app_dbg_dvld),
    .app_rx_ack(test_vcu128_gbe_app_rx_ack),
    .app_rx_badframe(test_vcu128_gbe_app_rx_badframe),
    .app_rx_data(test_vcu128_gbe_app_rx_data),
    .app_rx_dvld(test_vcu128_gbe_app_rx_dvld),
    .app_rx_eof(test_vcu128_gbe_app_rx_eof),
    .app_rx_overrun(test_vcu128_gbe_app_rx_overrun),
    .app_rx_rst(test_vcu128_gbe_app_rx_rst),
    .app_rx_srcip(test_vcu128_gbe_app_rx_srcip),
    .app_rx_srcport(test_vcu128_gbe_app_rx_srcport),
    .app_tx_afull(test_vcu128_gbe_app_tx_afull),
    .app_tx_data(test_vcu128_gbe_app_tx_data),
    .app_tx_destip(test_vcu128_gbe_app_tx_destip),
    .app_tx_destport(test_vcu128_gbe_app_tx_destport),
    .app_tx_dvld(test_vcu128_gbe_app_tx_dvld),
    .app_tx_eof(test_vcu128_gbe_app_tx_eof),
    .app_tx_overflow(test_vcu128_gbe_app_tx_overflow),
    .app_tx_rst(test_vcu128_gbe_app_tx_rst),
    .mac_rx_badframe(test_vcu128_gbe_mac_rx_badframe),
    .mac_rx_clk(gbe_userclk2_out),
    .mac_rx_data(test_vcu128_gbe_mac_rx_data),
    .mac_rx_dvld(test_vcu128_gbe_mac_rx_dvld),
    .mac_rx_goodframe(test_vcu128_gbe_mac_rx_goodframe),
    .mac_rx_rst(rst_125_out),
    .mac_syncacquired(test_vcu128_gbe_mac_syncacquired),
    .mac_tx_ack(test_vcu128_gbe_mac_tx_ack),
    .mac_tx_clk(gbe_userclk2_out),
    .mac_tx_data(test_vcu128_gbe_mac_tx_data),
    .mac_tx_dvld(test_vcu128_gbe_mac_tx_dvld),
    .mac_tx_rst(rst_125_out),
    .wb_ack_o(wbs_ack_i[TEST_VCU128_GBE_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[TEST_VCU128_GBE_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(TEST_VCU128_GBE_WBID0+1)*32-1:(TEST_VCU128_GBE_WBID0)*32]),
    .wb_err_o(wbs_err_i[TEST_VCU128_GBE_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[TEST_VCU128_GBE_WBID0]),
    .wb_we_i(wbs_we_o)
  );


  gig_eth_mac #(
    .MAX_FRAME_SIZE_JUMBO(9022),
    .MAX_FRAME_SIZE_STANDARD(1522)
  ) test_vcu128_gbe_mac (
    .conf_rx_en(1),
    .conf_rx_jumbo_en(0),
    .conf_rx_no_chk_crc(0),
    .conf_tx_en(1),
    .conf_tx_jumbo_en(0),
    .conf_tx_no_gen_crc(0),
    .gmii_col(0),
    .gmii_crs(0),
    .gmii_rx_data(test_vcu128_gbe_mac_gmii_rx_data),
    .gmii_rx_dvld(test_vcu128_gbe_mac_gmii_rx_dvld),
    .gmii_rx_er(test_vcu128_gbe_mac_gmii_rx_er),
    .gmii_tx_data(test_vcu128_gbe_mac_gmii_tx_data),
    .gmii_tx_en(test_vcu128_gbe_mac_gmii_tx_en),
    .gmii_tx_er(test_vcu128_gbe_mac_gmii_tx_er),
    .mac_rx_badframe(test_vcu128_gbe_mac_rx_badframe),
    .mac_rx_data(test_vcu128_gbe_mac_rx_data),
    .mac_rx_dvld(test_vcu128_gbe_mac_rx_dvld),
    .mac_rx_goodframe(test_vcu128_gbe_mac_rx_goodframe),
    .mac_tx_ack(test_vcu128_gbe_mac_tx_ack),
    .mac_tx_data(test_vcu128_gbe_mac_tx_data),
    .mac_tx_dvld(test_vcu128_gbe_mac_tx_dvld),
    .mac_tx_underrun(0),
    .reset(rst_125_out),
    .rx_clk(gbe_userclk2_out),
    .tx_clk(gbe_userclk2_out)
  );


  mdio_config  test_vcu128_gbe_mdio_config_inst (
    .done(mdio_done),
    .mdc(phy_mdc),
    .mdio(phy_mdio),
    .sys_clk(sys_clk),
    .sys_clk_rst_sync(sys_clk_rst_sync)
  );


  gig_ethernet_pcs_pma_sgmii_lvds  test_vcu128_gbe_pcs_pma (
    .an_adv_config_vector_0(16'b1101100000000001),
    .an_interrupt_0(),
    .an_restart_config_0(1'b0),
    .clk125_out(gbe_userclk2_out),
    .clk312_out(),
    .configuration_vector_0(5'b10000),
    .gmii_isolate_0(),
    .gmii_rx_dv_0(test_vcu128_gbe_mac_gmii_rx_dvld),
    .gmii_rx_er_0(test_vcu128_gbe_mac_gmii_rx_er),
    .gmii_rxd_0(test_vcu128_gbe_mac_gmii_rx_data),
    .gmii_tx_en_0(test_vcu128_gbe_mac_gmii_tx_en),
    .gmii_tx_er_0(test_vcu128_gbe_mac_gmii_tx_er),
    .gmii_txd_0(test_vcu128_gbe_mac_gmii_tx_data),
    .refclk625_n(test_vcu128_gbe_refclk625_n),
    .refclk625_p(test_vcu128_gbe_refclk625_p),
    .reset(sys_rst | ~mdio_done),
    .riu_prsnt_1(1'b0),
    .riu_prsnt_2(1'b0),
    .riu_prsnt_3(1'b0),
    .riu_rddata_1(16'b0),
    .riu_rddata_2(16'b0),
    .riu_rddata_3(16'b0),
    .riu_valid_1(1'b0),
    .riu_valid_2(1'b0),
    .riu_valid_3(1'b0),
    .rst_125_out(rst_125_out),
    .rx_dly_rdy_1(1'b1),
    .rx_dly_rdy_2(1'b1),
    .rx_dly_rdy_3(1'b1),
    .rx_vtc_rdy_1(1'b1),
    .rx_vtc_rdy_2(1'b1),
    .rx_vtc_rdy_3(1'b1),
    .rxn_0(test_vcu128_gbe_rx_n),
    .rxp_0(test_vcu128_gbe_rx_p),
    .sgmii_clk_en_0(),
    .sgmii_clk_f_0(),
    .sgmii_clk_r_0(),
    .signal_detect_0(1'b1),
    .speed_is_100_0(1'b0),
    .speed_is_10_100_0(1'b0),
    .status_vector_0(),
    .tx_dly_rdy_1(1'b1),
    .tx_dly_rdy_2(1'b1),
    .tx_dly_rdy_3(1'b1),
    .tx_vtc_rdy_1(1'b1),
    .tx_vtc_rdy_2(1'b1),
    .tx_vtc_rdy_3(1'b1),
    .txn_0(test_vcu128_gbe_tx_n),
    .txp_0(test_vcu128_gbe_tx_p)
  );

  // vcu128: VCU128
  vcu128_infrastructure  vcu128_infrastructure_inst (
    .clk_200(clk_200),
    .idelay_rdy(idelay_rdy),
    .sys_clk0(sys_clk),
    .sys_clk180(sys_clk180),
    .sys_clk270(sys_clk270),
    .sys_clk_buf_n(sys_clk_n),
    .sys_clk_buf_p(sys_clk_p),
    .sys_clk_rst_sync(sys_clk_rst_sync),
    .sys_rst(sys_rst)
  );

  // sys_block: xps:sys_block0
  sys_block #(
    .BOARD_ID(12),
    .REV_MAJ(12),
    .REV_MIN(0),
    .REV_RCS(32)
  ) sys_block_inst (
    .user_clk(user_clk),
    .wb_ack_o(wbs_ack_i[SYS_BLOCK_INST_WBID0]),
    .wb_adr_i(wbs_adr_o[(0+1)*32-1:(0)*32]),
    .wb_clk_i(wb_clk_i),
    .wb_cyc_i(wbs_cyc_o[SYS_BLOCK_INST_WBID0]),
    .wb_dat_i(wbs_dat_o),
    .wb_dat_o(wbs_dat_i[(SYS_BLOCK_INST_WBID0+1)*32-1:(SYS_BLOCK_INST_WBID0)*32]),
    .wb_err_o(wbs_err_i[SYS_BLOCK_INST_WBID0]),
    .wb_rst_i(wb_rst_i),
    .wb_sel_i(wbs_sel_o),
    .wb_stb_i(wbs_stb_o[SYS_BLOCK_INST_WBID0]),
    .wb_we_i(wbs_we_o)
  );

  // usermodule: test_vcu128
  wbs_arbiter #(
    .N_SLAVES(N_WB_SLAVES),
    .SLAVE_ADDR(SLAVE_ADDR),
    .SLAVE_HIGH(SLAVE_HIGH),
    .TIMEOUT(1024)
  ) wbs_arbiter_inst (
    .wb_clk_i(wb_clk_i),
    .wb_rst_i(wb_rst_i),
    .wbm_ack_o(wbm_ack_i),
    .wbm_adr_i(wbm_adr_o),
    .wbm_cyc_i(wbm_cyc_o),
    .wbm_dat_i(wbm_dat_o),
    .wbm_dat_o(wbm_dat_i),
    .wbm_err_o(wbm_err_i),
    .wbm_sel_i(wbm_sel_o),
    .wbm_stb_i(wbm_stb_o),
    .wbm_we_i(wbm_we_o),
    .wbs_ack_i(wbs_ack_i),
    .wbs_adr_o(wbs_adr_o),
    .wbs_cyc_o(wbs_cyc_o),
    .wbs_dat_i(wbs_dat_i),
    .wbs_dat_o(wbs_dat_o),
    .wbs_err_i(wbs_err_i),
    .wbs_sel_o(wbs_sel_o),
    .wbs_stb_o(wbs_stb_o),
    .wbs_we_o(wbs_we_o)
  );


/*
                   _                                  _       
     /\           (_)                                | |      
    /  \   ___ ___ _  __ _ _ __  _ __ ___   ___ _ __ | |_ ___ 
   / /\ \ / __/ __| |/ _` | '_ \| '_ ` _ \ / _ \ '_ \| __/ __|
  / ____ \__ \__ \ | (_| | | | | | | | | |  __/ | | | |_\__ \ 
 /_/    \_\___/___/_|\__, |_| |_|_| |_| |_|\___|_| |_|\__|___/
                      __/ |                                   
                     |___/                                    
*/
  // microblaze: xps:microblaze0
  assign mb_intr = |mb_intr_v;
  assign wb_clk_i = sys_clk;
  assign wb_rst_i = sys_rst;
  // onegbe: gbe
  assign phy_pdown_n = 1'b1;
  assign phy_rst_n = ~sys_rst;
  // vcu128: VCU128
  assign sys_clk90 = ~sys_clk270;
  // xsg: VCU128
  assign user_clk = sys_clk;
  assign user_clk180 = sys_clk180;
  assign user_clk270 = sys_clk270;
  assign user_clk90 = sys_clk90;


endmodule