%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                             %
%   Center for Astronomy Signal Processing and Electronics Research           %
%   http://seti.ssl.berkeley.edu/casper/                                      %
%   Copyright (C) 2006 University of California, Berkeley                     %
%                                                                             %
%   This program is free software; you can redistribute it and/or modify      %
%   it under the terms of the GNU General Public License as published by      %
%   the Free Software Foundation; either version 2 of the License, or         %
%   (at your option) any later version.                                       %
%                                                                             %
%   This program is distributed in the hope that it will be useful,           %
%   but WITHOUT ANY WARRANTY; without even the implied warranty of            %
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             %
%   GNU General Public License for more details.                              %
%                                                                             %
%   You should have received a copy of the GNU General Public License along   %
%   with this program; if not, write to the Free Software Foundation, Inc.,   %
%   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.               %
%                                                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function b = xps_x64_adc(blk_obj)

if ~isa(blk_obj,'xps_block')
    error('XPS_ADC class requires a xps_block class object');
end

if ~strcmp(get(blk_obj,'type'),'xps_x64_adc')
    error(['Wrong XPS block type: ',get(blk_obj,'type')]);
end

blk_name = get(blk_obj,'simulink_name');
xsg_obj = get(blk_obj,'xsg_obj');

s.hw_sys = get(xsg_obj,'hw_sys');
s.adc_clk_rate = eval_param(blk_name,'adc_clk_rate');


switch s.hw_sys
    case 'ROACH'
        ucf_constraints_clock  = struct('IOSTANDARD', 'LVDS_25', 'DIFF_TERM', 'TRUE', 'PERIOD', [num2str(1000/s.adc_clk_rate*4),' ns']);
        ucf_constraints_term   = struct('IOSTANDARD', 'LVDS_25', 'DIFF_TERM', 'TRUE');
        ucf_constraints_noterm = struct('IOSTANDARD', 'LVDS_25');
    % end case 'ROACH'
    otherwise
        error(['Unsupported hardware system: ',s.hw_sys]);
end % end switch s.hw_sys

b = class(s,'xps_x64_adc',blk_obj);

% ip name and version
b = set(b, 'ip_name', 'x64_adc_interface');
switch s.hw_sys
    case 'iBOB'
        b = set(b, 'ip_version', '1.00.a');
    case 'ROACH'
        b = set(b, 'ip_version', '1.00.a'); %was 1.01.a
end % switch s.hw_sys

supp_ip_names    = {'', 'opb_adccontroller'};
supp_ip_versions = {'', '1.00.a'};

b = set(b, 'supp_ip_names', supp_ip_names);
b = set(b, 'supp_ip_versions', supp_ip_versions);

%%% DEBUG

ucf_constraints = struct('IOSTANDARD',iostandard);

extportname = 'gpioa'

ext_ports.io_pad_p = {pad_bitwidth  s.io_dir    [extportname, '_p'] [iobname,'_p([',num2str(s.bit_index),']+1)']    'vector=true'   struct()    ucf_constraints };
ext_ports.io_pad_n = {pad_bitwidth  s.io_dir    [extportname, '_n'] [iobname,'_n([',num2str(s.bit_index),']+1)']    'vector=true'   struct()    ucf_constraints };

ext_ports.io_pad =   {pad_bitwidth  s.io_dir    extportname         [iobname,'  ([',num2str(s.bit_index),']+1)']    'vector=true'   struct()    ucf_constraints };
% misc ports
%misc_ports.dout0       = {8 'out'  [s.adc_str,'_dout0']};
%misc_ports.dout1       = {8 'out'  [s.adc_str,'_dout1']};
%misc_ports.dout2       = {8 'out'  [s.adc_str,'_dout2']};
%misc_ports.dout3       = {8 'out'  [s.adc_str,'_dout3']};
%misc_ports.dout4       = {8 'out'  [s.adc_str,'_dout4']};
%misc_ports.dout5       = {8 'out'  [s.adc_str,'_dout5']};
%misc_ports.dout6       = {8 'out'  [s.adc_str,'_dout6']};
%misc_ports.dout7       = {8 'out'  [s.adc_str,'_dout7']};
%misc_ports.DCLK_n       = {1 'in'  get(xsg_obj,'clk_src')};
%misc_ports.FCLK_p       = {1 'in' [s.adc_str,'_clk']};
%misc_ports.FCLK_n       = {1 'in' [s.adc_str,'_clk90']};
%misc_ports.DatIn_p      = {8 'in' [s.adc_str,'_dcm_locked']};
%misc_ports.DatIn_n      = {8 'in' [s.adc_str,'_dcm_locked']};
%if strcmp(get(b,'ip_version'), '1.01.a')
%    misc_ports.dcm_reset        = {1 'in'  [s.adc_str,'_dcm_reset']};
%    misc_ports.dcm_psdone       = {1 'out' [s.adc_str,'_psdone']};
%    misc_ports.ctrl_clk180_out  = {1 'out' [s.adc_str,'_clk180']};
%    misc_ports.ctrl_clk270_out  = {1 'out' [s.adc_str,'_clk270']};
%end
%misc_ports.SysRst           = {1 'in'  [s.adc_str,'_psclk']};
%misc_ports.ButtonUpNot      = {1 'in'  [s.adc_str,'_psen']};
%misc_ports.ButtonDownNot    = {1 'in'  [s.adc_str,'_psincdec']};
% misc_ports.DClkOffsetK      = {7 'in'  [s.adc_str,'_psincdec']};
% 
% misc_ports.DataEnableOut    = {1 'out'  [s.adc_str,'_psclk']};
% misc_ports.RxClkOut         = {1 'out'  [s.adc_str,'_psen']};
% misc_ports.RxClkNot         = {1 'out'  [s.adc_str,'_psincdec']};
% misc_ports.RxClkDiv         = {1 'out'  [s.adc_str,'_psincdec']};
% 
% misc_ports.RxPSDone         = {1 'out'  [s.adc_str,'_psclk']};
% misc_ports.RxDcmAlive       = {1 'out'  [s.adc_str,'_psen']};
% misc_ports.RxRst            = {1 'out'  [s.adc_str,'_psincdec']};
% misc_ports.PhaseOut         = {9 'out'  [s.adc_str,'_psincdec']};
% 
%misc_ports.AdcRst           = {1 'out'  [s.adc_str,'_psincdec']};

%b = set(b,'misc_ports',misc_ports);

% external ports
mhs_constraints = struct('SIGIS','CLK', 'CLK_FREQ',num2str(s.adc_clk_rate*1e6));

s.adc_str = 'adc0'
adcport0 = [s.hw_sys, '.', 'zdok', s.adc_str(length(s.adc_str))];
s.adc_str = 'adc1'
adcport1 = [s.hw_sys, '.', 'zdok', s.adc_str(length(s.adc_str))];

% fclk <-> lclk; DCLK <-> ADclk

ext_ports.FCLKp_pinA         = {4 'in'  'FCLKp_pinA'         ['{',adcport0,'_p{[39 19 29 18]+1,:}}']                         'vector=true'  mhs_constraints ucf_constraints_clock };
ext_ports.FCLKn_pinA         = {4 'in'  'FCLKn_pinA'         ['{',adcport0,'_n{[39 19 29 18]+1,:}}']                         'vector=true'  mhs_constraints ucf_constraints_clock };
ext_ports.DCLK_p_pinA         = {4 'in'  'DCLK_p_pinA'         ['{',adcport0,'_p{[28 38 8 9]+1,:}}']                         'vector=true'  mhs_constraints ucf_constraints_clock };
ext_ports.DCLK_n_pinA         = {4 'in'  'DCLK_n_pinA'         ['{',adcport0,'_n{[28 38 8 9]+1,:}}']                         'vector=true'  mhs_constraints ucf_constraints_clock };
ext_ports.FCLKp_pinB         = {4 'in'  'FCLKp_pinB'         ['{',adcport1,'_p{[39 19 29 18]+1,:}}']                         'vector=true'  mhs_constraints ucf_constraints_clock };
ext_ports.FCLKp_pinB         = {4 'in'  'FCLKn_pinB'         ['{',adcport1,'_n{[39 19 29 18]+1,:}}']                         'vector=true'  mhs_constraints ucf_constraints_clock };
ext_ports.DCLK_p_pinB         = {4 'in'  'DCLK_p_pinB'         ['{',adcport1,'_p{[28 38 7 9]+1,:}}']                         'vector=true'  mhs_constraints ucf_constraints_clock };
ext_ports.DCLK_n_pinB         = {4 'in'  'DCLK_n_pinB'         ['{',adcport1,'_n{[28 38 7 9]+1,:}}']                         'vector=true'  mhs_constraints ucf_constraints_clock };


ext_ports.Dat_In_p_pinA        = {32 'in'  'Dat_In_p_pinA' ['{',adcport0,'_p{[30 31 32 33 34 35 36 37 10 11 12 13 14 15 16 17 0 1 2 3 4 5 6 7 20 21 22 23 24 25 26 27]+1,:}}']                         'vector=false'  struct()        ucf_constraints_term };

ext_ports.Dat_In_n_pinA        = {32 'in'  'Dat_In_n_pinA' ['{',adcport0,'_n{[30 31 32 33 34 35 36 37 10 11 12 13 14 15 16 17 0 1 2 3 4 5 6 7 20 21 22 23 24 25 26 27]+1,:}}']                         'vector=false'  struct()        ucf_constraints_term };

ext_ports.Dat_In_p_pinB        = {32 'in'  'Dat_In_p_pinB' ['{',adcport1,'_p{[30 31 32 33 34 35 36 37 10 11 12 13 14 15 16 17 0 1 2 3 4 5 6 7 20 21 22 23 24 25 26 27]+1,:}}']                         'vector=false'  struct()        ucf_constraints_term };

ext_ports.Dat_In_n_pinB        = {32 'in'  'Dat_In_n_pinB' ['{',adcport1,'_n{[30 31 32 33 34 35 36 37 10 11 12 13 14 15 16 17 0 1 2 3 4 5 6 7 20 21 22 23 24 25 26 27]+1,:}}']                         'vector=false'  struct()        ucf_constraints_term };


b = set(b,'ext_ports',ext_ports);

