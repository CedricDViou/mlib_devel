`timescale 1ns / 1ps
module adc086000_interface(
				adc0_clk_p,
				adc0_clk_n,
				adc0_sync_p,
				adc0_sync_n,
				adc0_user_outofrange,
				adc0_user_sync,
				adc0_user_data_valid,
				adc0_outofrange_p,
				adc0_outofrange_n,
				adc0_dataeveni_p,
				adc0_dataeveni_n,
				adc0_dataoddi_p,
				adc0_dataoddi_n,
				adc0_dataevenq_p,
				adc0_dataevenq_n,
				adc0_dataoddq_p,
				adc0_dataoddq_n,
                adc0_reset,
//				adc0_ddrb_p,
//				adc0_ddrb_n,
				adc0_user_datai0,
				adc0_user_datai1,
				adc0_user_datai2,
				adc0_user_datai3,
				adc0_user_dataq0,
				adc0_user_dataq1,
				adc0_user_dataq2,
				adc0_user_dataq3,

				adc1_clk_p,
				adc1_clk_n,
				adc1_sync_p,
				adc1_sync_n,
				adc1_user_outofrange,
				adc1_user_sync,
				adc1_user_data_valid,
				adc1_outofrange_p,
				adc1_outofrange_n,
				adc1_dataeveni_p,
				adc1_dataeveni_n,
				adc1_dataoddi_p,
				adc1_dataoddi_n,
				adc1_dataevenq_p,
				adc1_dataevenq_n,
				adc1_dataoddq_p,
				adc1_dataoddq_n,
                adc1_reset,
//				adc1_ddrb_p,
//				adc1_ddrb_n,
				adc1_user_datai0,
				adc1_user_datai1,
				adc1_user_datai2,
				adc1_user_datai3,
				adc1_user_dataq0,
				adc1_user_dataq1,
				adc1_user_dataq2,
				adc1_user_dataq3,

				// dcm/ctrl signals
				dcm_reset,
				ctrl_reset,
				ctrl_clk_in,
				ctrl_clk_out,
				ctrl_clk90_out,
				ctrl_clk180_out,
				ctrl_clk270_out,
				ctrl_dcm_locked,
				dcm_psclk,
				dcm_psincdec,
				dcm_psen,
                //fsclk0,
                //sdata0,
                //scs0,
       //         fsclk1,
       //         sdata1,
       //         scs1,
				dcm_psdone,
                calrun

);

// System Parameters
//==================
parameter DEBUG_MODE = 0;
parameter USE_ASYNCH_FIFOS = 1;
parameter CALIBRATION_MODE = 1;

// Inputs and Outputs
//===================
input 				adc0_clk_p;
input					adc0_clk_n;
input [7:0]		adc0_dataeveni_p;
input [7:0]		adc0_dataeveni_n;
input [7:0]		adc0_dataoddi_p;
input [7:0]		adc0_dataoddi_n;
input [7:0]		adc0_dataevenq_p;
input [7:0]		adc0_dataevenq_n;
input [7:0]		adc0_dataoddq_p;
input [7:0]		adc0_dataoddq_n;
input					adc0_outofrange_p;
input					adc0_outofrange_n;
input					adc0_sync_p;
input					adc0_sync_n;
input 				adc1_clk_p;
input					adc1_clk_n;
input [7:0]		adc1_dataeveni_p;
input [7:0]		adc1_dataeveni_n;
input [7:0]		adc1_dataoddi_p;
input [7:0]		adc1_dataoddi_n;
input [7:0]		adc1_dataevenq_p;
input [7:0]		adc1_dataevenq_n;
input [7:0]		adc1_dataoddq_p;
input [7:0]		adc1_dataoddq_n;
input					adc1_outofrange_p;
input					adc1_outofrange_n;
input					adc1_sync_p;
input					adc1_sync_n;
input					dcm_reset;
input					ctrl_reset;
input					ctrl_clk_in;
input					dcm_psclk;
input					dcm_psen;
input					dcm_psincdec;

output				dcm_psdone;
output				ctrl_clk_out;
output				ctrl_clk90_out;
output				ctrl_clk180_out;
output				ctrl_clk270_out;
output				ctrl_dcm_locked;
output				adc1_user_outofrange;
output				adc1_user_sync;
output				adc1_user_data_valid;
//output				adc1_ddrb_p;
//output				adc1_ddrb_n;
output [7:0]	adc1_user_datai0;
output [7:0]	adc1_user_datai1;
output [7:0]	adc1_user_datai2;
output [7:0]	adc1_user_datai3;
output [7:0]	adc1_user_dataq0;
output [7:0]	adc1_user_dataq1;
output [7:0]	adc1_user_dataq2;
output [7:0]	adc1_user_dataq3;
output				adc0_user_outofrange;
output				adc0_user_sync;
output				adc0_user_data_valid;
//output				adc0_ddrb_p;
//output				adc0_ddrb_n;
output [7:0]	adc0_user_datai0;
output [7:0]	adc0_user_datai1;
output [7:0]	adc0_user_datai2;
output [7:0]	adc0_user_datai3;
output [7:0]	adc0_user_dataq0;
output [7:0]	adc0_user_dataq1;
output [7:0]	adc0_user_dataq2;
output [7:0]	adc0_user_dataq3;

output adc0_reset;
output adc1_reset;

//output fsclk0;
//output sdata0;
//output scs0;
//output fsclk1;
//output sdata1;
//output scs1;

input calrun;

// Wires and Regs
//===============
wire adc0_clk_buf;
wire adc0_clk;
wire adc0_clk90;
wire adc0_clk180;
wire adc0_clk270;
wire adc0_clk_dcm;
wire adc0_clk90_dcm;
wire adc0_clk180_dcm;
wire adc0_clk270_dcm;
wire [7:0] adc0_data_eveni;
wire [7:0] adc0_data_oddi;
wire [7:0] adc0_data_evenq;
wire [7:0] adc0_data_oddq;
wire [7:0] adc0_user_datai0_asynch;
wire [7:0] adc0_user_datai1_asynch;
wire [7:0] adc0_user_datai2_asynch;
wire [7:0] adc0_user_datai3_asynch;
wire [7:0] adc0_user_dataq0_asynch;
wire [7:0] adc0_user_dataq1_asynch;
wire [7:0] adc0_user_dataq2_asynch;
wire [7:0] adc0_user_dataq3_asynch;
wire adc0_sync; // ddr
wire adc0_sync_rise;
wire adc0_sync_fall;
wire adc0_data_fifo_full;
wire adc0_data_fifo_empty;
wire [63:0] adc0_fifo_din;
wire [63:0] adc0_fifo_dout;
wire adc1_clk_buf;
wire adc1_clk; 
wire adc1_clk90;
wire adc1_clk180; 
wire adc1_clk270;
wire adc1_clk_dcm;
wire adc1_clk90_dcm;
wire adc1_clk180_dcm;
wire adc1_clk270_dcm;
wire [7:0] adc1_data_eveni;
wire [7:0] adc1_data_oddi;
wire [7:0] adc1_data_evenq;
wire [7:0] adc1_data_oddq;
wire [7:0] adc1_user_datai0_asynch;
wire [7:0] adc1_user_datai1_asynch;
wire [7:0] adc1_user_datai2_asynch;
wire [7:0] adc1_user_datai3_asynch;
wire [7:0] adc1_user_dataq0_asynch;
wire [7:0] adc1_user_dataq1_asynch;
wire [7:0] adc1_user_dataq2_asynch;
wire [7:0] adc1_user_dataq3_asynch;
wire adc1_sync; // ddr   
wire adc1_sync_rise;
wire adc1_sync_fall;
wire adc1_data_fifo_full;
wire adc1_data_fifo_empty;
wire [63:0] adc1_fifo_din;
wire [63:0] adc1_fifo_dout;
wire adc0_dcm_locked;
wire adc1_dcm_locked;
wire adc1_dcm_psdone;
reg adc0_dcm_psen;
wire [7:0] shift_count;
wire [7:0] dcm0_status;
wire [7:0] dcm1_status;
wire adc0_outofrange_fall;
wire adc0_outofrange_rise;
wire adc1_outofrange_fall;
wire adc1_outofrange_rise;
wire adc1_ps_overflow;

// Reset wires
//wire adc0_reset;
reg adc0_fifo_rst;
wire adc0_dcm_reset;
//wire adc1_reset;
reg adc1_fifo_rst;
wire adc1_dcm_reset;
reg ps_shift_count_rst;
reg shift_back_count_rst;



wire [9:0] stable_sample_count, sampling_timer_count;
wire sample, sample_idle, sample_valid, sample_error;
reg sample_shift, sample_load;
wire [1:0] sample_pout;
wire edge_found;
wire [9:0] ps_shift_count;
reg [4:0] SYNC_STATE, SYNC_NEXT_STATE;
reg shift_back_count_en;
reg sync_done;
wire [31:0] delay_count;
wire [9:0] shift_back_count;
wire [1:0] fsclkwire;

reg ps_shift_count_en;
reg clk_sample_req;
reg adc1_dcm_psincdec;
reg adc1_dcm_psen;
//reg test_pattern_start;
wire test_pattern_done;
wire [15:0] num_resets;
wire [7:0] test_count;
reg save_clk_sample;

// Module Declarations
//====================
Counter num_reset_counter( 
	.Clock(dcm_psclk), 
	.Reset(ctrl_reset),
	.Set(0), 
	.Load(0), 
	.Enable(adc1_dcm_reset), 
	.In(), 
	.Count(num_resets)
);
defparam num_reset_counter.width = 16;
defparam num_reset_counter.limited = 1;

Counter test_counter( 
	.Clock(dcm_psclk), 
	.Reset(ctrl_reset), 
	.Set(0), 
	.Load(0), 
	.Enable(1), 
	.In(8'b0), 
	.Count(test_count)
);
defparam test_counter.width = 8;

assign adc1_ps_overflow = dcm1_status[0];
Counter ps_shift_counter (
	.Clock(dcm_psclk),
	.Reset(ctrl_reset | ps_shift_count_rst ),
	.Set(0),
	.Load(0),
	.Enable(adc1_dcm_psen),
	.In(10'b0),
	.Count(ps_shift_count)
);
defparam ps_shift_counter.width = 10;


clock_sample clock_sample (
	.clock(adc0_clk),
	.din(adc1_clk),
	.reset(ctrl_reset | adc1_dcm_reset),
	.dout(sample),
	.sample_req(clk_sample_req),
	.sample_valid(sample_valid),
	.sample_error(sample_error),
    .sample_idle(sample_idle),
	.sampling_timer_count(sampling_timer_count),
	.stable_sample_count(stable_sample_count),
    .edge_found(edge_found),
    .ps_shift_count(ps_shift_count)
);

Counter delay_counter (
	.Clock(adc0_clk),
	.Reset(ctrl_reset),
	.Set(0),
	.Load(0),
	.Enable(1'b1),
	.In(10'b0),
	.Count(delay_count)
);

Counter shift_back_counter (
	.Clock(dcm_psclk),
	.Reset(ctrl_reset | shift_back_count_rst),
	.Set(0),
	.Load(0),
	.Enable(shift_back_count_en),
	.In(10'b0),
	.Count(shift_back_count)
);

Counter dcm_psclk_divider (
  .Clock(dcm_psclk),
  .Reset(ctrl_reset),
  .Set(0),
  .Load(0),
  .Enable(1'b1),
  .In(),
  .Count(fsclkwire)
);

wire [31:0] new_delay_count;
wire reset_trig;
wire reset_start, end_reset, adc0_view_reset, adc1_reset_test;
adc_reset adc1_reset_block (
  .base_clk(dcm_psclk),
  .reset_clk(adc0_clk),
  .system_reset(ctrl_reset),
  .reset_output(adc1_reset_test),
  .delay_count(new_delay_count),
  .reset_start(reset_start),
  .end_reset(end_reset),
  .adc0_view_reset(adc0_view_reset)
);

assign reset_trig = (new_delay_count == 32'hfffffff);
assign adc1_reset = adc1_reset_test;

//wire scs, sdata, fsclk;
//wire start = (delay_count == 31'h7ffffffe);
//assign fsclk = fsclkwire[1];
//assign fsclk0 = dcm_psclk;//fsclkwire[1];
////assign fsclk1 = fsclkwire[1];
//assign scs0 = 1;
////assign sdata = 0;
//test_pattern_fsm test_pattern_fsm(
//  .clock(fsclk),
//  .reset(ctrl_reset),
//  .start(start),// test_pattern_start),
//  .sdata(sdata0),
//  .done(test_pattern_done),
//  .scs(sc)
//);
//assign sdata0 = sdata;
//assign sdata1 = sdata;
//assign scs0 = scs;
//assign scs1 = scs;


//wire setup_done;
//adc_serial_setup adc_serial_setup(
//  .fsclk(fsclk0),
//  .reset(ctrl_reset),
//  .setup_done(setup_done),
//  .sdata(sdata0),
//  .scs(scs0),
//  .calibration_done(~calrun)
//);


//assign adc1_reset = (delay_count == 31'h7ffffffe);// | delay_count == 31'h7fffffff);
//assign adc1_dcm_reset = (delay_count == 31'h7fffffff);
//assign adc1_reset = (delay_count == 31'h7ffffffe);// | delay_count == 31'h7fffffff);
//assign adc1_dcm_reset = (delay_count == 31'h7fffffff);
//assign adc0_ddrb_p = (delay_count == 31'h7ffffffe);// | delay_count == 31'h7fffffff);


//parameter STATE_IDLE = 0;
//parameter STATE_SHIFT = 1;
//parameter STATE_WAIT = 2;
//parameter STATE_DONE = 3;
//parameter STATE_SAMPLE = 4;
//parameter STATE_WAIT_SAMPLE = 5;
//parameter STATE_CHECK_EDGE_FOUND = 6;
//parameter STATE_INIT = 7;
//parameter STATE_CHECK_PHASE = 8;
//parameter STATE_RESET_ADC1_DCM = 9;
//parameter STATE_BEGIN_RESET = 10;
//parameter STATE_SHIFT_CLK_BACK = 11;
//parameter STATE_WAIT_SHIFT_BACK = 12;
//parameter STATE_CHECK_SHIFT_BACK = 13;
//parameter STATE_USE_TEST_DATA = 14;
//parameter STATE_RESET_ADC = 15;
//parameter STATE_RESET_DCM = 16;
//parameter STATE_WAIT_STABLE = 17;
//parameter STATE_RESET = 18;
//parameter STATE_WAIT_SHIFT = 19;
//always @ (posedge dcm_psclk) begin
// 	  if (ctrl_reset) begin
//		  SYNC_STATE <= STATE_INIT;
//	  end else begin
//		  SYNC_STATE <= SYNC_NEXT_STATE;
//	  end
//  end
//
//	always @ ( * ) begin
//        ps_shift_count_rst = 0;
//        save_clk_sample = 0;
//		adc1_reset = 0;
//		adc1_dcm_reset = 0;
//        adc1_fifo_rst = 0;
//		adc0_reset = 0;
//        adc0_dcm_reset = 0;
//        adc0_fifo_rst = 0;
//        
//        adc1_dcm_psen = 0;
//
//		adc1_dcm_psincdec = 1;
//		clk_sample_req = 0;
//		shift_back_count_en = 0;
//		ps_shift_count_en = 0;
//		shift_back_count_rst = 0;
//		sync_done = 0;
//		SYNC_NEXT_STATE = SYNC_STATE;
//	
//		case (SYNC_STATE)
//			STATE_INIT: begin
//				if (delay_count > 32'h7ffffff) begin
//					SYNC_NEXT_STATE = STATE_RESET_ADC;
//				end
//			end
//
//            STATE_RESET_DCM: begin
//              adc0_dcm_reset = 1;
//              adc1_dcm_reset = 1;
//              SYNC_NEXT_STATE = STATE_RESET_ADC;
//           end 
//            
//            STATE_RESET_ADC: begin
//              adc1_reset = 1;
//              adc0_reset = 1;
//              adc1_fifo_rst = 1;
//              adc0_fifo_rst = 1;
//              ps_shift_count_rst = 1;
//              SYNC_NEXT_STATE = STATE_DONE;
//            end
//
//            STATE_WAIT_STABLE: begin
//              if (delay_count > 32'hffffffe) begin
//                SYNC_NEXT_STATE = STATE_IDLE;
//              end
//            end
//
//			STATE_IDLE: begin
//				if (adc1_ps_overflow) begin
//					SYNC_NEXT_STATE = STATE_RESET;
//				end else if (adc0_dcm_locked && adc1_dcm_locked && ~adc1_ps_overflow) begin
//					SYNC_NEXT_STATE = STATE_SHIFT;
//				end
//			end
//	
//			STATE_SHIFT: begin
//				adc1_dcm_psen = 1;
//				ps_shift_count_en = 1;
//				SYNC_NEXT_STATE = STATE_WAIT_SHIFT;
//			end
//	
//			STATE_WAIT_SHIFT: begin
//				if (adc1_dcm_psdone) begin
//					SYNC_NEXT_STATE = STATE_SAMPLE;
//				end
//			end
//	
//			STATE_SAMPLE: begin
//				clk_sample_req = 1;
//				if (~sample_idle) begin
//					SYNC_NEXT_STATE = STATE_WAIT_SAMPLE;
//				end
//			end
//			
//			STATE_WAIT_SAMPLE: begin
//				if (sample_valid) begin
//                    save_clk_sample = 1;
//					SYNC_NEXT_STATE = STATE_CHECK_EDGE_FOUND;
//				end
//			end
//	
//			STATE_CHECK_EDGE_FOUND: begin
//				if (edge_found)	begin
//					SYNC_NEXT_STATE = STATE_DONE;//STATE_CHECK_PHASE;
//				end else begin
//					SYNC_NEXT_STATE = STATE_IDLE;
//				end
//			end
//	
//			STATE_CHECK_PHASE: begin
//				shift_back_count_rst = 1;
//				if ((ps_shift_count > 16) && (ps_shift_count <48)) begin
//					SYNC_NEXT_STATE = STATE_BEGIN_RESET;
//				end else begin
//					SYNC_NEXT_STATE = STATE_SHIFT_CLK_BACK;
//				end
//			end
//	
//			
//			STATE_SHIFT_CLK_BACK: begin
//				adc1_dcm_psincdec = 0;
//				adc1_dcm_psen = 1;
//				shift_back_count_en = 1;
//				SYNC_NEXT_STATE = STATE_WAIT_SHIFT_BACK;
//			end
//		
//			STATE_WAIT_SHIFT_BACK: begin
//				if (adc1_dcm_psdone)
//					SYNC_NEXT_STATE = STATE_CHECK_SHIFT_BACK;
//			end
//	
//			STATE_CHECK_SHIFT_BACK: begin
//				if (ps_shift_count == shift_back_count)
//					SYNC_NEXT_STATE = STATE_DONE;
//				else
//					SYNC_NEXT_STATE = STATE_SHIFT_CLK_BACK;
//			end
//	
//			STATE_DONE: begin
//				sync_done = 1;
//				SYNC_NEXT_STATE = STATE_DONE;
//			end
//	
//			default: begin
//				SYNC_NEXT_STATE = STATE_IDLE;
//			end
//			//STATE_BEGIN_RESET: begin
//			//	adc1_reset = 1;
//			//	if (~adc1_dcm_locked) begin
//			//		SYNC_NEXT_STATE = STATE_RESET_ADC1_DCM;
//			//	end
//			//end
//	
//			//STATE_RESET_ADC1_DCM: begin
//			//	adc1_dcm_reset = 1;
//			//	SYNC_NEXT_STATE = STATE_IDLE;
//			//end
//            //STATE_USE_TEST_DATA: begin
//            //  test_pattern_start = 1;
//            //  if (test_pattern_done) begin
//            //    SYNC_NEXT_STATE = STATE_DONE;
//            //  end
//            //end
//		endcase
//	end
assign adc0_user_datai0 = adc0_user_datai0_asynch;//adc0_fifo_dout[63:56]; 
assign adc1_user_datai0 = adc1_user_datai0_asynch;//adc1_fifo_dout[63:56]; 
assign adc0_user_dataq0 = adc0_user_dataq0_asynch;//adc0_fifo_dout[31:24];
assign adc1_user_dataq0 = adc1_user_dataq0_asynch;//adc1_fifo_dout[31:24];
assign adc1_user_datai1 = adc1_user_datai1_asynch;//adc1_fifo_dout[55:48];
assign adc0_user_datai1 = adc0_user_datai1_asynch;//adc0_fifo_dout[55:48];
assign adc0_user_dataq1 = adc0_user_dataq1_asynch;//adc0_fifo_dout[23:16];
assign adc1_user_dataq1 = adc1_user_dataq1_asynch;//adc1_fifo_dout[23:16];
assign adc1_user_datai2 = adc1_user_datai2_asynch;//adc1_fifo_dout[47:40];
assign adc0_user_datai2 = adc0_user_datai2_asynch;//adc0_fifo_dout[47:40];
assign adc0_user_dataq2 = adc0_user_dataq2_asynch;//adc0_fifo_dout[15:8];
assign adc1_user_dataq2 = adc1_user_dataq2_asynch;//adc1_fifo_dout[15:8];
assign adc0_user_datai3 = adc0_user_datai3_asynch;//adc0_fifo_dout[39:32];
assign adc1_user_datai3 = adc1_user_datai3_asynch;//adc1_fifo_dout[39:32];//{6'b0, edge_found, adc1_dcm_psdone};//
assign adc0_user_dataq3 = adc0_user_dataq3_asynch;//adc0_fifo_dout[7:0];//{1'b0, adc1_ps_overflow,SYNC_STATE, adc1_dcm_psen};//
assign adc1_user_dataq3 = {new_delay_count[3:0], reset_start, end_reset, adc0_view_reset, reset_trig, adc1_reset_test};//adc1_user_dataq3_asynch;//adc1_fifo_dout[7:0];//ps_shift_count[7:0];//{1'b0, calibration_state, interleaved_sampler_done,valid_interleave};//


// Counter to keep track of the number of phase shifts
// Digitize LVDS pairs
// -------------------
// ADC0
diff_in adc0_DI_dataeveni 	(.DP(adc0_dataeveni_p), .DN(adc0_dataeveni_n), .D(adc0_data_eveni));
diff_in adc0_DI_dataoddi 	(.DP(adc0_dataoddi_p), .DN(adc0_dataoddi_n), .D(adc0_data_oddi));
diff_in adc0_DI_dataevenq 	(.DP(adc0_dataevenq_p), .DN(adc0_dataevenq_n), .D(adc0_data_evenq));
diff_in adc0_DI_dataoddq 	(.DP(adc0_dataoddq_p), .DN(adc0_dataoddq_n), .D(adc0_data_oddq));

// Capture/Recapture Logic
DDR_Reg adc0_DDRs04 (.clk(adc0_clk), .reset(1'b0), .din(adc0_data_eveni), .dout_rise(adc0_user_datai0_asynch), .dout_fall(adc0_user_datai2_asynch));
DDR_Reg adc0_DDRs15 (.clk(adc0_clk), .reset(1'b0), .din(adc0_data_oddi), .dout_rise(adc0_user_datai1_asynch), .dout_fall(adc0_user_datai3_asynch));
DDR_Reg adc0_DDRs26 (.clk(adc0_clk), .reset(1'b0), .din(adc0_data_evenq), .dout_rise(adc0_user_dataq0_asynch), .dout_fall(adc0_user_dataq2_asynch));
DDR_Reg adc0_DDRs37 (.clk(adc0_clk), .reset(1'b0), .din(adc0_data_oddq), .dout_rise(adc0_user_dataq1_asynch), .dout_fall(adc0_user_dataq3_asynch));

// ADC1
diff_in adc1_DI_dataeveni 	(.DP(adc1_dataeveni_p), .DN(adc1_dataeveni_n), .D(adc1_data_eveni));
diff_in adc1_DI_dataoddi 	(.DP(adc1_dataoddi_p), .DN(adc1_dataoddi_n), .D(adc1_data_oddi));
diff_in adc1_DI_dataevenq 	(.DP(adc1_dataevenq_p), .DN(adc1_dataevenq_n), .D(adc1_data_evenq));
diff_in adc1_DI_dataoddq 	(.DP(adc1_dataoddq_p), .DN(adc1_dataoddq_n), .D(adc1_data_oddq));

// Capture/Recapture Logic
DDR_Reg adc1_DDRs04 (.clk(adc1_clk), .reset(1'b0), .din(adc1_data_eveni), .dout_rise(adc1_user_datai0_asynch), .dout_fall(adc1_user_datai2_asynch));
DDR_Reg adc1_DDRs15 (.clk(adc1_clk), .reset(1'b0), .din(adc1_data_oddi), .dout_rise(adc1_user_datai1_asynch), .dout_fall(adc1_user_datai3_asynch));
DDR_Reg adc1_DDRs26 (.clk(adc1_clk), .reset(1'b0), .din(adc1_data_evenq), .dout_rise(adc1_user_dataq0_asynch), .dout_fall(adc1_user_dataq2_asynch));
DDR_Reg adc1_DDRs37 (.clk(adc1_clk), .reset(1'b0), .din(adc1_data_oddq), .dout_rise(adc1_user_dataq1_asynch), .dout_fall(adc1_user_dataq3_asynch));


// Module Declarations
//====================
wire adc0_sync0;
wire adc0_sync1;
wire adc0_sync2;
wire adc0_sync3;
wire adc1_sync0;
wire adc1_sync1;
wire adc1_sync2;
wire adc1_sync3;
wire adc0_outofrange0;
wire adc0_outofrange1;
wire adc0_outofrange2;
wire adc0_outofrange3;
wire adc1_outofrange0;
wire adc1_outofrange1;
wire adc1_outofrange2;
wire adc1_outofrange3;

ddr_capture adc0_sync_capture(
	.clk_0(adc0_clk),
	.clk_90(adc0_clk90),
	.reset(ctrl_reset),
	.data_p(adc0_sync_p),
	.data_n(adc0_sync_n),
	.data0(adc0_sync0),
	.data90(adc0_sync1),
	.data180(adc0_sync2),
	.data270(adc0_sync3)
);

ddr_capture adc1_sync_capture(
	.clk_0(adc1_clk),
	.clk_90(adc1_clk90),
	.reset(ctrl_reset),
	.data_p(adc1_sync_p),
	.data_n(adc1_sync_n),
	.data0(adc1_sync0),
	.data90(adc1_sync1),
	.data180(adc1_sync2),
	.data270(adc1_sync3)
);
assign adc0_user_sync = adc0_sync0 | adc0_sync1 | adc0_sync2 | adc0_sync3;
assign adc1_user_sync = adc1_sync0 | adc1_sync1 | adc1_sync3 | adc1_sync3;

ddr_capture adc0_outofrange(
	.clk_0(adc0_clk),
	.clk_90(adc0_clk90),
	.reset(ctrl_reset),
	.data_p(adc0_outofrange_p),
	.data_n(adc0_outofrange_n),
	.data0(adc0_outofrange0),
	.data90(adc0_outofrange1),
	.data180(adc0_outofrange2),
	.data270(adc0_outofrange3)
);

ddr_capture adc1_outofrange(
	.clk_0(adc1_clk),
	.clk_90(adc1_clk90),
	.reset(ctrl_reset),
	.data_p(adc1_outofrange_p),
	.data_n(adc1_outofrange_n),
	.data0(adc1_outofrange0),
	.data90(adc1_outofrange1),
	.data180(adc1_outofrange2),
	.data270(adc1_outofrange3)
);
assign adc0_user_outofrange = adc0_outofrange0 | adc0_outofrange1 | adc0_outofrange2 | adc0_outofrange3;
assign adc1_user_outofrange = adc1_outofrange0 | adc1_outofrange1 | adc1_outofrange2 | adc1_outofrange3;




// Conditional Builds
//===================
	// Asynchronous FIFO to support multiple clocks
	// --------------------------------------------
	assign adc0_fifo_din = {
	 	adc0_user_datai0_asynch,
		adc0_user_datai1_asynch,
		adc0_user_datai2_asynch,
		adc0_user_datai3_asynch,
		adc0_user_dataq0_asynch,
		adc0_user_dataq1_asynch,
		adc0_user_dataq2_asynch,
		adc0_user_dataq3_asynch
	};
	async_fifo_64by1024 adc0_data_fifo (
		.din(adc0_fifo_din),
		.rd_clk(adc0_clk),
		.rd_en(~adc0_data_fifo_empty),
		.rst(adc0_fifo_rst | ctrl_reset),
		.wr_clk(adc0_clk),
		.wr_en(~adc0_data_fifo_full),// && sync_done),// && adc_clocks_aligned),
		.dout(adc0_fifo_dout),
		.empty(adc0_data_fifo_empty),
		.full(adc0_data_fifo_full),
		.valid(adc0_user_data_valid)
	);
	

	assign adc1_fifo_din = {
	 	adc1_user_datai0_asynch,
		adc1_user_datai1_asynch,
		adc1_user_datai2_asynch,
		adc1_user_datai3_asynch,
		adc1_user_dataq0_asynch,
		adc1_user_dataq1_asynch,
		adc1_user_dataq2_asynch,
		adc1_user_dataq3_asynch
	};
	async_fifo_64by1024 adc1_data_fifo (
		.din(adc1_fifo_din),
		.rd_clk(adc0_clk),
		.rd_en(~adc1_data_fifo_empty),
		.rst(adc1_fifo_rst | ctrl_reset),
		.wr_clk(adc1_clk),
		.wr_en(~adc1_data_fifo_full),// && sync_done),// && adc_clocks_aligned),
		.dout(adc1_fifo_dout),
		.empty(adc1_data_fifo_empty),
		.full(adc1_data_fifo_full),
		.valid(adc1_user_data_valid)
	);
	
// DCM(s) and CLock Management 
// -----------------------------
// Clock from ZDOK0 	
 IBUFGDS #(// Buffer for input clk
	.DIFF_TERM("TRUE"),       	// Differential Termination (Virtex-4/5, Spartan-3E/3A)
	.IOSTANDARD("LVDS_25")    	// Specify the input I/O standard
) IBUFGDS_3 (
	.O(adc0_clk_buf),  						// Buffer output
	.I(adc0_clk_p),  						// Diff_p buffer input (connect directly to top-level port)
	.IB(adc0_clk_n) 						// Diff_n buffer input (connect directly to top-level port)
);

DCM #(
	.CLK_FEEDBACK("1X"), 									// Specify clock feedback of NONE, 1X or 2X
	.CLKDV_DIVIDE(2.0), 									// Divide by: 1.5,2.0,2.5,3.0,3.5,4.0,4.5,5.0,5.5,6.0,6.5 7.0,7.5,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0 or 16.0
	.CLKFX_DIVIDE(1), 										// Can be any integer from 1 to 32
	.CLKFX_MULTIPLY(4), 									// Can be any integer from 2 to 32
	.CLKIN_DIVIDE_BY_2("FALSE"), 					// TRUE/FALSE to enable CLKIN divide by two feature
	.CLKIN_PERIOD(4.0000), 									// Specify period of input clock in ns from 1.25 to 1000.00
	.CLKOUT_PHASE_SHIFT("NONE"), 					// Specify phase shift mode of NONE or FIXED
	.DESKEW_ADJUST("SOURCE_SYNCHRONOUS"), // SOURCE_SYNCHRONOUS, SYSTEM_SYNCHRONOUS or an integer from 0 to 15
	.DFS_FREQUENCY_MODE("HIGH"), 					// LOW or HIGH frequency mode for frequency synthesis
	.DLL_FREQUENCY_MODE("HIGH"), 					// LOW, HIGH, or HIGH_SER frequency mode for DLL
	.DUTY_CYCLE_CORRECTION("TRUE"), 			// Duty cycle correction, TRUE or FALSE
	.FACTORY_JF(16'hf0f0), 								// FACTORY JF value suggested to be set to 16'hf0f0
	.PHASE_SHIFT(0), 											// Amount of fixed phase shift from -255 to 1023
	.STARTUP_WAIT("FALSE"), 								// Delay configuration DONE until DCM LOCK, TRUE/FALSE
	.DSS_MODE("NONE")
) DCM_ZDOK0 (
	.CLKFB(adc0_clk),       		// DCM clock feedback
	.CLKIN(adc0_clk_buf),      // Clock input (from IBUFG, BUFG or DCM)		 
	.DSSEN(0),
	.PSCLK(), // dcm_psclk
	.PSEN( 1'b0 ),
	.PSINCDEC( 1'b0 ),
	.RST( ctrl_reset | adc0_dcm_reset ),           // DCM asynchronous reset input
	.CLKDV( ),       						// Divided DCM CLK out (CLKDV_DIVIDE)
	.CLKFX( ),       						// DCM CLK synthesis out (M/D)
	.CLKFX180( ), 							// 180 degree CLK synthesis out			
	.CLK0( adc0_clk_dcm ),      	// 0 degree DCM CLK output
	.CLK2X( ),       						// 2X DCM CLK output
	.CLK2X180( ), 							// 2X, 180 degree DCM CLK out			
	.CLK90( adc0_clk90_dcm ),    // 90 degree DCM CLK output
	.CLK180( adc0_clk180_dcm ),	// 180 degree DCM CLK output
	.CLK270( adc0_clk270_dcm ),  // 270 degree DCM CLK output
	.LOCKED( adc0_dcm_locked ),  // DCM LOCK status output
	.PSDONE( dcm_psdone ),
	.STATUS( dcm0_status)
);

// Buffer outputs of DCM
BUFG adc0_clk0_bufg (.I( adc0_clk_dcm ), .O( adc0_clk ));
BUFG adc0_clk90_bufg (.I( adc0_clk90_dcm ), .O( adc0_clk90 ));
BUFG adc0_clk180_bufg (.I( adc0_clk180_dcm ), .O( adc0_clk180 ));
BUFG adc0_clk270_bufg (.I( adc0_clk270_dcm ), .O( adc0_clk270 ));

// Clock from ZDOK1
IBUFGDS #(// Buffer for input clk
	.DIFF_TERM("TRUE"),       	// Differential Termination (Virtex-4/5, Spartan-3E/3A)
	.IOSTANDARD("LVDS_25")    	// Specify the input I/O standard
) IBUFGDS_adc1_clk (
	.O(adc1_clk_buf),  						// Buffer output
	.I(adc1_clk_p),  						// Diff_p buffer input (connect directly to top-level port)
	.IB(adc1_clk_n) 						// Diff_n buffer input (connect directly to top-level port)
);

DCM #(
	.CLK_FEEDBACK("1X"), 									// Specify clock feedback of NONE, 1X or 2X
	.CLKDV_DIVIDE(2.0), 									// Divide by: 1.5,2.0,2.5,3.0,3.5,4.0,4.5,5.0,5.5,6.0,6.5 7.0,7.5,8.0,9.0,10.0,11.0,12.0,13.0,14.0,15.0 or 16.0
	.CLKFX_DIVIDE(1), 										// Can be any integer from 1 to 32
	.CLKFX_MULTIPLY(4), 									// Can be any integer from 2 to 32
	.CLKIN_DIVIDE_BY_2("FALSE"), 					// TRUE/FALSE to enable CLKIN divide by two feature
	.CLKIN_PERIOD(4.0000), 									// Specify period of input clock in ns from 1.25 to 1000.00
	.CLKOUT_PHASE_SHIFT("VARIABLE"), 					// Specify phase shift mode of NONE or FIXED
	.DESKEW_ADJUST("SOURCE_SYNCHRONOUS"), // SOURCE_SYNCHRONOUS, SYSTEM_SYNCHRONOUS or an integer from 0 to 15
	.DFS_FREQUENCY_MODE("HIGH"), 					// LOW or HIGH frequency mode for frequency synthesis
	.DLL_FREQUENCY_MODE("HIGH"), 					// LOW, HIGH, or HIGH_SER frequency mode for DLL
	.DUTY_CYCLE_CORRECTION("TRUE"), 			// Duty cycle correction, TRUE or FALSE
	.FACTORY_JF(16'hf0f0), 								// FACTORY JF value suggested to be set to 16'hf0f0
	.PHASE_SHIFT(0), 											// Amount of fixed phase shift from -255 to 1023
	.STARTUP_WAIT("FALSE"), 								// Delay configuration DONE until DCM LOCK, TRUE/FALSE
	.DSS_MODE("NONE")
) DCM_ZDOK1 (
	.CLKFB( adc1_clk ),       		// DCM clock feedback
	.CLKIN( adc1_clk_buf ),      // Clock input (from IBUFG, BUFG or DCM)		 
	.DSSEN( 0 ),
	.PSCLK( dcm_psclk ),
	.PSEN( adc1_dcm_psen ),
	.PSINCDEC( adc1_dcm_psincdec ),
	.RST(ctrl_reset | adc1_dcm_reset ),           // DCM asynchronous reset input
	.CLKDV( ),       						// Divided DCM CLK out (CLKDV_DIVIDE)
	.CLKFX( ),       						// DCM CLK synthesis out (M/D)
	.CLKFX180( ), 							// 180 degree CLK synthesis out			
	.CLK0( adc1_clk_dcm ),      	// 0 degree DCM CLK output
	.CLK2X( ),       						// 2X DCM CLK output
	.CLK2X180( ), 							// 2X, 180 degree DCM CLK out			
	.CLK90( adc1_clk90_dcm ),    // 90 degree DCM CLK output
	.CLK180( adc1_clk180_dcm ),	// 180 degree DCM CLK output
	.CLK270( adc1_clk270_dcm ),  // 270 degree DCM CLK output
	.LOCKED( adc1_dcm_locked ),  // DCM LOCK status output
	.PSDONE( adc1_dcm_psdone ),
	.STATUS( dcm1_status)
);

// Buffer outputs of DCM
BUFG adc1_clk0_bufg (.I( adc1_clk_dcm ), .O( adc1_clk ));
BUFG adc1_clk90_bufg (.I( adc1_clk90_dcm ), .O( adc1_clk90 ));
BUFG adc1_clk180_bufg (.I( adc1_clk180_dcm ), .O( adc1_clk180 ));
BUFG adc1_clk270_bufg (.I( adc1_clk270_dcm ), .O( adc1_clk270 ));

assign ctrl_clk_out = adc0_clk;//dcm_psclk;//adc0_clk;
assign ctrl_clk90_out = adc0_clk90;
assign ctrl_clk180_out = adc0_clk180;
assign ctrl_clk270_out = adc0_clk270;
assign ctrl_dcm_locked = adc0_dcm_locked;


endmodule
